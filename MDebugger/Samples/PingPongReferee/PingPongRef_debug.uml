<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_cJ2kYDJjEeeIZIaasUdwVA" name="PingPong">
    <eAnnotations xmi:id="_cJ2kYTJjEeeIZIaasUdwVA" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:id="_cJ2kYjJjEeeIZIaasUdwVA" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <eAnnotations xmi:id="_BOJhMDKKEeeIZIaasUdwVA" source="UMLRT_Default_top">
      <details xmi:id="_BOJhMTKKEeeIZIaasUdwVA" key="top_name" value="Debug__Top"/>
    </eAnnotations>
    <packageImport xmi:id="_KMXq4IEiEee4oNt2wclvpA">
      <importedPackage xmi:type="uml:Model" href="../CommGateWay/model.uml#_MZw7AAdxEeadtKuU2t6fMg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_-IyvEDJjEeeIZIaasUdwVA" name="PingPongProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_-CQpQDJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <interfaceRealization xmi:id="_-J_o8TJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-J138DJjEeeIZIaasUdwVA" contract="_-J138DJjEeeIZIaasUdwVA"/>
        <interfaceRealization xmi:id="_-KSj4zJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA" contract="_-KSj4TJjEeeIZIaasUdwVA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-J138DJjEeeIZIaasUdwVA" name="PingPongProtocol">
        <ownedOperation xmi:id="_SFv0oDKDEeeIZIaasUdwVA" name="ping"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KIy4DJjEeeIZIaasUdwVA" name="PingPongProtocol~">
        <ownedOperation xmi:id="_gOJSsDKDEeeIZIaasUdwVA" name="pong"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-KIy4jJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KIy4DJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_-KSj4DJjEeeIZIaasUdwVA" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_-KSj4TJjEeeIZIaasUdwVA" name="PingPongProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_-Kbt0DJjEeeIZIaasUdwVA" client="_-CQpQDJjEeeIZIaasUdwVA" supplier="_-KSj4TJjEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_SHYzYDKDEeeIZIaasUdwVA" operation="_SFv0oDKDEeeIZIaasUdwVA"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_gOl-oDKDEeeIZIaasUdwVA" operation="_gOJSsDKDEeeIZIaasUdwVA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_IYQmMDKEEeeIZIaasUdwVA" name="Pinger" classifierBehavior="_LUEakDKFEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uF7scDKEEeeIZIaasUdwVA" name="pingPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_BGFjoDKFEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_ipVIEH34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_F7fGwH38Eee8vPff7YDTwQ" name="pingerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_wcqYQH38Eee8vPff7YDTwQ" name="pingsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_0n-iIH38Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_KRVqcIEiEee4oNt2wclvpA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KRbxEIEiEee4oNt2wclvpA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_KRbxEYEiEee4oNt2wclvpA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KRtd4IEiEee4oNt2wclvpA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KRtd4YEiEee4oNt2wclvpA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KRuE8IEiEee4oNt2wclvpA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KR5EEIEiEee4oNt2wclvpA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_LUEakDKFEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_LWT2QDKFEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_LXpTADKFEeeIZIaasUdwVA" name="Initial" source="_KtaicIEiEee4oNt2wclvpA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvIZsIEiEee4oNt2wclvpA" name="Initial__297">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_pmpBMDKFEeeIZIaasUdwVA" name="onPong" source="_Krf24IEiEee4oNt2wclvpA" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_PpG2QDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::onPong&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_8vqa8H38Eee8vPff7YDTwQ" name="startSignal" source="_KwymkIEiEee4oNt2wclvpA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_k9UxsH39Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::startSignal&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_ylW4MH3-Eee8vPff7YDTwQ" name="keepPlaying" source="_KvPHYIEiEee4oNt2wclvpA" target="_66GgIH3_Eee8vPff7YDTwQ">
            <ownedRule xmi:id="_7d170H3-Eee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_-icVQH3-Eee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePings = this->pingsSent &lt; 3;&#xD;
return sendMorePings;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_3dtRwH3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_VhaLYH3_Eee8vPff7YDTwQ" name="endOfRound" source="_KnzpsIEiEee4oNt2wclvpA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_ebkC8H3_Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_HIvnQH4AEee8vPff7YDTwQ" name="timeout" source="_KpaMMIEiEee4oNt2wclvpA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MG9NsH4AEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KoPukYEiEee4oNt2wclvpA" name="Debug__endOfRound" guard="_IeWE4IBIEeeUZo7DI-sn-Q" source="_mQKSkH39Eee8vPff7YDTwQ" target="_KnzpsIEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_IeWE4IBIEeeUZo7DI-sn-Q">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_PBawUIBIEeeUZo7DI-sn-Q">
                <language>C++</language>
                <body>bool threePingsSent = this->pingsSent > 2;&#xD;
return threePingsSent;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoQVoIEiEee4oNt2wclvpA" name="Debug__endOfRound__204">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KoQ8sIEiEee4oNt2wclvpA" name="Debug__endOfRound__S" guard="_KoRjwYEiEee4oNt2wclvpA" source="_KnzpsIEiEee4oNt2wclvpA" target="_KoEvcYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KoRjwYEiEee4oNt2wclvpA" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KoRjwIEiEee4oNt2wclvpA" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoSK0IEiEee4oNt2wclvpA" name="Debug__endOfRound__S__206">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KoUAAIEiEee4oNt2wclvpA" name="Debug__endOfRound__E" source="_KoKPAIEiEee4oNt2wclvpA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoUAAYEiEee4oNt2wclvpA" name="Debug__endOfRound__E__207">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KoaGoIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__varChange" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoaGooEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__varChange__209">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KoaGoYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KoaGo4EiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__setBreakPoint" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoatsYEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__setBreakPoint__210">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KoatsIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KoatsoEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__remBreakPoint" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KoattIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__remBreakPoint__211">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Koats4EiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KobUwIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__viewBreakPoints" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KobUwoEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__viewBreakPoints__212">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KobUwYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KobUw4EiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kob70YEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgSetExecMode__213">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Kob70IEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KodJ8IEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_Kn5JQIEiEee4oNt2wclvpA" target="_Kn5JQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KodJ84EiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgDeferMsg__214">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KodJ8YEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_KodJ8oEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqKaIYEiEee4oNt2wclvpA" name="Debug__timeout" source="_66GgIH3_Eee8vPff7YDTwQ" target="_KpaMMIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqLBMIEiEee4oNt2wclvpA" name="Debug__timeout__227">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_IZk9AH4AEee8vPff7YDTwQ" port="_F7fGwH38Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqM2YIEiEee4oNt2wclvpA" name="Debug__timeout__S" guard="_KqOEgYEiEee4oNt2wclvpA" source="_KpaMMIEiEee4oNt2wclvpA" target="_Kp3fMYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KqOEgYEiEee4oNt2wclvpA" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KqOEgIEiEee4oNt2wclvpA" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqOrkIEiEee4oNt2wclvpA" name="Debug__timeout__S__229">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KqULIIEiEee4oNt2wclvpA" name="Debug__timeout__E" source="_KqCeUYEiEee4oNt2wclvpA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqX1gIEiEee4oNt2wclvpA" name="Debug__timeout__E__230">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KqdVEIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__varChange" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqejMIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__varChange__232">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Kqd8IIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqhmgIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__setBreakPoint" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqhmgoEiEee4oNt2wclvpA" name="Debug__timeout__dbg__setBreakPoint__233">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KqhmgYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqiNkIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__remBreakPoint" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kqi0oYEiEee4oNt2wclvpA" name="Debug__timeout__dbg__remBreakPoint__234">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kqi0oIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqkCwIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__viewBreakPoints" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kqkp0IEiEee4oNt2wclvpA" name="Debug__timeout__dbg__viewBreakPoints__235">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KqkCwYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqlQ4IEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgSetExecMode" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KqntIIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgSetExecMode__236">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Kql38IEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KqntIYEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgDeferMsg" source="_KpnnkIEiEee4oNt2wclvpA" target="_KpnnkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kqo7QIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgDeferMsg__237">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KqoUMIEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_KqoUMYEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsDQgYEiEee4oNt2wclvpA" name="Debug__onPong" source="_LXWYEDKFEeeIZIaasUdwVA" target="_Krf24IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsD3kIEiEee4oNt2wclvpA" name="Debug__onPong__253">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_97SwsDKGEeeIZIaasUdwVA" event="_gOl-oDKDEeeIZIaasUdwVA" port="_uF7scDKEEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_KsHh8IEiEee4oNt2wclvpA" name="Debug__onPong__S" guard="_KsHh8oEiEee4oNt2wclvpA" source="_Krf24IEiEee4oNt2wclvpA" target="_KrtSQIEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KsHh8oEiEee4oNt2wclvpA" name="Debug__GuardonPong">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KsHh8YEiEee4oNt2wclvpA" name="Debug__GuardonPong">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsJ-MIEiEee4oNt2wclvpA" name="Debug__onPong__S__255">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__S&quot;,(char *)&quot;Debug__Path__onPong&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KsLMUIEiEee4oNt2wclvpA" name="Debug__onPong__E" source="_Kr9w8IEiEee4oNt2wclvpA" target="_mQKSkH39Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsLMUYEiEee4oNt2wclvpA" name="Debug__onPong__E__256">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__onPong__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KsMacIEiEee4oNt2wclvpA" name="Debug__onPong__dbg__varChange" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsNBgYEiEee4oNt2wclvpA" name="Debug__onPong__dbg__varChange__258">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KsNBgIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsNokIEiEee4oNt2wclvpA" name="Debug__onPong__dbg__setBreakPoint" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsOPoYEiEee4oNt2wclvpA" name="Debug__onPong__dbg__setBreakPoint__259">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KsOPoIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsPdwIEiEee4oNt2wclvpA" name="Debug__onPong__dbg__remBreakPoint" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsPdwoEiEee4oNt2wclvpA" name="Debug__onPong__dbg__remBreakPoint__260">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KsPdwYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsQE0IEiEee4oNt2wclvpA" name="Debug__onPong__dbg__viewBreakPoints" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsQr4IEiEee4oNt2wclvpA" name="Debug__onPong__dbg__viewBreakPoints__261">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KsQE0YEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsQr4YEiEee4oNt2wclvpA" name="Debug__onPong__dbg__dbgSetExecMode" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsQr44EiEee4oNt2wclvpA" name="Debug__onPong__dbg__dbgSetExecMode__262">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KsQr4oEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KsRS8IEiEee4oNt2wclvpA" name="Debug__onPong__dbg__dbgDeferMsg" source="_KrmkkIEiEee4oNt2wclvpA" target="_KrmkkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KsR6AYEiEee4oNt2wclvpA" name="Debug__onPong__dbg__dbgDeferMsg__263">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KsRS8YEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_KsR6AIEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kt7f0IEiEee4oNt2wclvpA" name="Debug__Initial" source="_Kzc5AIEiEee4oNt2wclvpA" target="_KtaicIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kt7f0YEiEee4oNt2wclvpA" name="Debug__Initial__274">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;PLAYING&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING TO START&quot;,&quot;startSignal&quot;,&quot;PLAYING&quot;,&quot;start&quot;,&quot;StartProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;STARTING ROUND&quot;,&quot;startRound&quot;,&quot;WAITING FOR END OF ROUND&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR END OF ROUND&quot;,&quot;endRound&quot;,&quot;STARTING ROUND&quot;,&quot;end&quot;,&quot;endProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;keepPlaying&quot;,&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPong&quot;,&quot;ThreePingsSent?&quot;,&quot;pong&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePingsSent?&quot;,&quot;endOfRound&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_Kzi_oIEiEee4oNt2wclvpA" name="ConnectionEstablished" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kt8t8IEiEee4oNt2wclvpA" name="Debug__Initial__S" guard="_Kt98EYEiEee4oNt2wclvpA" source="_KtaicIEiEee4oNt2wclvpA" target="_KtpzAYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_Kt98EYEiEee4oNt2wclvpA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Kt98EIEiEee4oNt2wclvpA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo3&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kt-jIIEiEee4oNt2wclvpA" name="Debug__Initial__S__276">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KuECsIEiEee4oNt2wclvpA" name="Debug__Initial__E" source="_KtvSkIEiEee4oNt2wclvpA" target="_n1-PQH38Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuGe8IEiEee4oNt2wclvpA" name="Debug__Initial__E__277">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KuI7MIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuJiQIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange__279">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KuI7MYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KuMlkIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuMlkoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint__280">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KuMlkYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KuNzsIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuQP8IEiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint__281">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KuOawIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KuT6UIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuUhYYEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints__282">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KuUhYIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KuVIcIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuVvgIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode__283">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KuVIcYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KuWWkIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg" source="_KtjsYYEiEee4oNt2wclvpA" target="_KtjsYYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KuW9oIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg__284">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KuWWkYEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_KuWWkoEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KvtogIEiEee4oNt2wclvpA" name="Debug__keepPlaying" source="_mQKSkH39Eee8vPff7YDTwQ" target="_KvPHYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvtogYEiEee4oNt2wclvpA" name="Debug__keepPlaying__299">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePingsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KvwEwIEiEee4oNt2wclvpA" name="Debug__keepPlaying__S" guard="_Kvwr0IEiEee4oNt2wclvpA" source="_KvPHYIEiEee4oNt2wclvpA" target="_Kvg0MYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_Kvwr0IEiEee4oNt2wclvpA" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KvwEwYEiEee4oNt2wclvpA" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePingsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvxS4IEiEee4oNt2wclvpA" name="Debug__keepPlaying__S__301">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KvzIEIEiEee4oNt2wclvpA" name="Debug__keepPlaying__E" source="_KvowAIEiEee4oNt2wclvpA" target="_66GgIH3_Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvzIEYEiEee4oNt2wclvpA" name="Debug__keepPlaying__E__302">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kv2LYIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__varChange" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv2ycIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__varChange__304">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Kv2LYYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kv3ZgIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__setBreakPoint" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv4AkYEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__setBreakPoint__305">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kv4AkIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kv4noIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__remBreakPoint" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv4nooEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__remBreakPoint__306">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kv4noYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kv5OsIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv51wIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__viewBreakPoints__307">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kv5OsYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kv51wYEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv8SAIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgSetExecMode__308">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Kv51woEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kv85EIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_KvbUoIEiEee4oNt2wclvpA" target="_KvbUoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kv85E4EiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgDeferMsg__309">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kv85EYEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_Kv85EoEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KxqwUIEiEee4oNt2wclvpA" name="Debug__startSignal" source="_n1-PQH38Eee8vPff7YDTwQ" target="_KwymkIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KxrXYIEiEee4oNt2wclvpA" name="Debug__startSignal__322">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal&quot;,(char *)&quot;WAITING TO START&quot;,(char *)&quot;Debug__Path__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_-470kH38Eee8vPff7YDTwQ" event="_FbDakH35Eee8vPff7YDTwQ" port="_ipVIEH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_KxxeAIEiEee4oNt2wclvpA" name="Debug__startSignal__S" guard="_KxyFEYEiEee4oNt2wclvpA" source="_KwymkIEiEee4oNt2wclvpA" target="_KxMPMYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KxyFEYEiEee4oNt2wclvpA" name="Debug__GuardstartSignal">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KxyFEIEiEee4oNt2wclvpA" name="Debug__GuardstartSignal">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KxysIIEiEee4oNt2wclvpA" name="Debug__startSignal__S__324">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__S&quot;,(char *)&quot;Debug__Path__startSignal&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kx29kIEiEee4oNt2wclvpA" name="Debug__startSignal__E" source="_KxbfwIEiEee4oNt2wclvpA" target="_LXWYEDKFEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kx7PAIEiEee4oNt2wclvpA" name="Debug__startSignal__E__325">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__startSignal__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KyAukIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__varChange" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyCjwIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__varChange__327">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KyAukYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KyEY8IEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__setBreakPoint" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyFAAIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__setBreakPoint__328">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KyEY8YEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KyFnEIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__remBreakPoint" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyGOIIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__remBreakPoint__329">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KyFnEYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KyHcQIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__viewBreakPoints" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyIDUIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__viewBreakPoints__330">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KyHcQYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KyIDUYEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__dbgSetExecMode" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyIqYIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__dbgSetExecMode__331">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KyIDUoEiEee4oNt2wclvpA" name="Debug__MSG" port="_KRVqcIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KyJRcIEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__dbgDeferMsg" source="_KxDsUYEiEee4oNt2wclvpA" target="_KxDsUYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KyJ4gYEiEee4oNt2wclvpA" name="Debug__startSignal__dbg__dbgDeferMsg__332">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KyJRcYEiEee4oNt2wclvpA" name="Debug__MSG" port="_uF7scDKEEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
            <trigger xmi:id="_KyJ4gIEiEee4oNt2wclvpA" name="Debug__MSG" port="_ipVIEH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KziYkIEiEee4oNt2wclvpA" name="Debug__InitDebug" source="_LWmxMDKFEeeIZIaasUdwVA" target="_Kzc5AIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KziYkYEiEee4oNt2wclvpA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_LWmxMDKFEeeIZIaasUdwVA" name="Pseudo3"/>
          <subvertex xmi:type="uml:State" xmi:id="_LXWYEDKFEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KzsJkIEiEee4oNt2wclvpA" name="PLAYING__347">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KzswoIEiEee4oNt2wclvpA" name="PLAYING__348">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_n1-PQH38Eee8vPff7YDTwQ" name="WAITING TO START">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KztXsIEiEee4oNt2wclvpA" name="WAITING TO START__349">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kz16kIEiEee4oNt2wclvpA" name="WAITING TO START__350">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_mQKSkH39Eee8vPff7YDTwQ" name="ThreePingsSent?" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_66GgIH3_Eee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kz4W0IEiEee4oNt2wclvpA" name="WAITING FOR TIMER__351">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kz4W0YEiEee4oNt2wclvpA" name="WAITING FOR TIMER__352">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KnzpsIEiEee4oNt2wclvpA" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_Kn5JQIEiEee4oNt2wclvpA" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_KoEvcYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KoKPAIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_Kn5JQYEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_Kop-QoEiEee4oNt2wclvpA" name="Debug__init__trans__endOfRound" source="_KoEvcYEiEee4oNt2wclvpA" target="_KooJEYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KpMJwIEiEee4oNt2wclvpA" name="Debug__init__trans__endOfRound__219">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KoqlUIEiEee4oNt2wclvpA" name="Debug__Ac__endOfRound" source="_KooJEYEiEee4oNt2wclvpA" target="_KoowIIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KorMYIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>this->pingsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KoqlUYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KorzcIEiEee4oNt2wclvpA" name="Debug__En__WAITING TO START" source="_KoowIIEiEee4oNt2wclvpA" target="_Kop-QIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KpPNEIEiEee4oNt2wclvpA" name="Debug__En__WAITING TO START__222">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KorzcYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KosagIEiEee4oNt2wclvpA" name="Debug__end__trans__endOfRound" source="_Kop-QIEiEee4oNt2wclvpA" target="_KoKPAIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KpQbMIEiEee4oNt2wclvpA" name="Debug__end__trans__endOfRound__224">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KosagYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KooJEYEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KooJEoEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ko4nwIEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound__215">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KoowIIEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KoowIYEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ko_8gYEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound__216">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kop-QIEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kop-QYEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KpK7oIEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound__217">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KpaMMIEiEee4oNt2wclvpA" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KpnnkIEiEee4oNt2wclvpA" name="Debug__C__timeout">
            <connectionPoint xmi:id="_Kp3fMYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KqCeUYEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KpnnkYEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_Kq2WooEiEee4oNt2wclvpA" name="Debug__init__trans__timeout" source="_Kp3fMYEiEee4oNt2wclvpA" target="_Kq0hcIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KrTCkIEiEee4oNt2wclvpA" name="Debug__init__trans__timeout__243">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__init__trans__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Kq29sIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR TIMER" source="_Kq0hcIEiEee4oNt2wclvpA" target="_Kq1IgIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KrXUAIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR TIMER__245">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kq29sYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kq29soEiEee4oNt2wclvpA" name="Debug__AC__timeout" source="_Kq1IgIEiEee4oNt2wclvpA" target="_Kq1IgoEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kq3kwIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kq29s4EiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kq3kwYEiEee4oNt2wclvpA" name="Debug__En__PLAYING" source="_Kq1IgoEiEee4oNt2wclvpA" target="_Kq2WoIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kra-YIEiEee4oNt2wclvpA" name="Debug__En__PLAYING__248">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kq3kwoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kq4L0IEiEee4oNt2wclvpA" name="Debug__end__trans__timeout" source="_Kq2WoIEiEee4oNt2wclvpA" target="_KqCeUYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KrczkIEiEee4oNt2wclvpA" name="Debug__end__trans__timeout__250">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kq4L0YEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Kq0hcIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kq0hcYEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kq-ScIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER__238">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kq1IgIEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kq1IgYEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KrFnMYEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout__239">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kq1IgoEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kq1vkIEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KrLGwYEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout__240">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kq2WoIEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kq2WoYEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KrMU4IEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING__241">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Krf24IEiEee4oNt2wclvpA" name="Debug__Path__onPong" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KrmkkIEiEee4oNt2wclvpA" name="Debug__C__onPong">
            <connectionPoint xmi:id="_KrtSQIEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Kr9w8IEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KrmkkYEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_Ksk08IEiEee4oNt2wclvpA" name="Debug__init__trans__onPong" source="_KrtSQIEiEee4oNt2wclvpA" target="_Ksf8cIEiEee4oNt2wclvpA"/>
              <transition xmi:id="_Ksk08YEiEee4oNt2wclvpA" name="Debug__Ex__PLAYING" source="_Ksf8cIEiEee4oNt2wclvpA" target="_KsgjgIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KtHAcIEiEee4oNt2wclvpA" name="Debug__Ex__PLAYING__268">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Ksk08oEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Ksk084EiEee4oNt2wclvpA" name="Debug__AC__onPong" source="_KsgjgIEiEee4oNt2wclvpA" target="_Ksi_wIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ksk09YEiEee4oNt2wclvpA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;pong received.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__AC__onPong&quot;,(char *)&quot;Debug__B__Ac__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Ksk09IEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KslcAIEiEee4oNt2wclvpA" name="Debug__end__trans__onPong" source="_Ksi_wIEiEee4oNt2wclvpA" target="_Kr9w8IEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KtNHEIEiEee4oNt2wclvpA" name="Debug__end__trans__onPong__271">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__end__trans__onPong&quot;,(char *)&quot;Debug__A__Ac__onPong&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KslcAYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Ksf8cIEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Ksf8cYEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KssJsIEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING__264">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KsgjgIEiEee4oNt2wclvpA" name="Debug__B__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KsgjgYEiEee4oNt2wclvpA" name="Debug__B__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KsxpQIEiEee4oNt2wclvpA" name="Debug__B__Ac__onPong__265">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__B__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Ksi_wIEiEee4oNt2wclvpA" name="Debug__A__Ac__onPong">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KskN4IEiEee4oNt2wclvpA" name="Debug__A__Ac__onPong">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPong&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KtFyUIEiEee4oNt2wclvpA" name="Debug__A__Ac__onPong__266">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__onPong::Region1::Debug__A__Ac__onPong&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KtaicIEiEee4oNt2wclvpA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KtjsYYEiEee4oNt2wclvpA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_KtpzAYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KtvSkIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KtjsYoEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_Kuij0IEiEee4oNt2wclvpA" name="Debug__init__trans__Initial" source="_KtpzAYEiEee4oNt2wclvpA" target="_KuguoIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvBE8IEiEee4oNt2wclvpA" name="Debug__init__trans__Initial__289">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_Kuij0YEiEee4oNt2wclvpA" name="Debug__Ac__Initial" source="_KuguoIEiEee4oNt2wclvpA" target="_KuhVsIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvEIQIEiEee4oNt2wclvpA" name="Debug__Ac__Initial__291">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kuij0oEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KujK4IEiEee4oNt2wclvpA" name="Debug__En__WAITING TO START" source="_KuhVsIEiEee4oNt2wclvpA" target="_Kuh8wIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvFWYIEiEee4oNt2wclvpA" name="Debug__En__WAITING TO START__293">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__WAITING TO START&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KujK4YEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kujx8IEiEee4oNt2wclvpA" name="Debug__end__trans__Initial" source="_Kuh8wIEiEee4oNt2wclvpA" target="_KtvSkIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KvHLkIEiEee4oNt2wclvpA" name="Debug__end__trans__Initial__295">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KukZAIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KuguoIEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KuguoYEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KuybcYEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial__285">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KuhVsIEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KuhVsYEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ku5JIYEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial__286">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kuh8wIEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kuh8wYEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ku_20IEiEee4oNt2wclvpA" name="Debug__A__En__Initial__287">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KvPHYIEiEee4oNt2wclvpA" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KvbUoIEiEee4oNt2wclvpA" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_Kvg0MYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KvowAIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_Kvb7sIEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KwH4MIEiEee4oNt2wclvpA" name="Debug__init__trans__keepPlaying" source="_Kvg0MYEiEee4oNt2wclvpA" target="_KwGDAYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KwmZUIEiEee4oNt2wclvpA" name="Debug__init__trans__keepPlaying__314">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KwH4MYEiEee4oNt2wclvpA" name="Debug__Ac__keepPlaying" source="_KwGDAYEiEee4oNt2wclvpA" target="_KwGqEIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KwIfQIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KwH4MoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KwIfQYEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR TIMER" source="_KwGqEIEiEee4oNt2wclvpA" target="_KwHRIIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kwo1kIEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR TIMER__317">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KwJGUIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KwJGUYEiEee4oNt2wclvpA" name="Debug__end__trans__keepPlaying" source="_KwHRIIEiEee4oNt2wclvpA" target="_KvowAIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KwqDsIEiEee4oNt2wclvpA" name="Debug__end__trans__keepPlaying__319">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KwJGUoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KwGDAYEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KwGDAoEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KwSQQIEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying__310">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KwGqEIEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KwGqEYEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KwYW4YEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying__311">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KwHRIIEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KwHRIYEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KwlLMIEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying__312">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KwymkIEiEee4oNt2wclvpA" name="Debug__Path__startSignal" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KxDsUYEiEee4oNt2wclvpA" name="Debug__C__startSignal">
            <connectionPoint xmi:id="_KxMPMYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KxbfwIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KxDsUoEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KyhE4IEiEee4oNt2wclvpA" name="Debug__init__trans__startSignal" source="_KxMPMYEiEee4oNt2wclvpA" target="_KyfPsIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KzTIAIEiEee4oNt2wclvpA" name="Debug__init__trans__startSignal__338">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__init__trans__startSignal&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KyhE4YEiEee4oNt2wclvpA" name="Debug__Ex__WAITING TO START" source="_KyfPsIEiEee4oNt2wclvpA" target="_KyfPsoEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KzUWIIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING TO START__340">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KyhE4oEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KyhE44EiEee4oNt2wclvpA" name="Debug__AC__startSignal" source="_KyfPsoEiEee4oNt2wclvpA" target="_Kyf2wYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kyhr8YEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pingPort.ping().send();&#xD;
this->pingsSent++;&#xD;
log.show(&quot;ping message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__AC__startSignal&quot;,(char *)&quot;Debug__B__Ac__startSignal&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kyhr8IEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kyhr8oEiEee4oNt2wclvpA" name="Debug__En__PLAYING" source="_Kyf2wYEiEee4oNt2wclvpA" target="_Kygd0IEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KzWLUIEiEee4oNt2wclvpA" name="Debug__En__PLAYING__343">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kyhr84EiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kyhr9IEiEee4oNt2wclvpA" name="Debug__end__trans__startSignal" source="_Kygd0IEiEee4oNt2wclvpA" target="_KxbfwIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KzWyYIEiEee4oNt2wclvpA" name="Debug__end__trans__startSignal__345">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__end__trans__startSignal&quot;,(char *)&quot;Debug__A__En__PLAYING&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kyhr9YEiEee4oNt2wclvpA" name="Debug__Exec" port="_KRVqcIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KyfPsIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING TO START">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KyfPsYEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING TO START">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Ky1N8IEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING TO START__333">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ex__WAITING TO START&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KyfPsoEiEee4oNt2wclvpA" name="Debug__B__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kyf2wIEiEee4oNt2wclvpA" name="Debug__B__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING TO START&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KzANEIEiEee4oNt2wclvpA" name="Debug__B__Ac__startSignal__334">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__B__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kyf2wYEiEee4oNt2wclvpA" name="Debug__A__Ac__startSignal">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kyf2woEiEee4oNt2wclvpA" name="Debug__A__Ac__startSignal">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startSignal&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KzJ-EIEiEee4oNt2wclvpA" name="Debug__A__Ac__startSignal__335">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__Ac__startSignal&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kygd0IEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kygd0YEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KzLzQIEiEee4oNt2wclvpA" name="Debug__A__En__PLAYING__336">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Pinger::StateMachine::Region::Debug__C__startSignal::Region1::Debug__A__En__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_Kzc5AIEiEee4oNt2wclvpA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KRVDYYEiEee4oNt2wclvpA" name="Debug__recallAllMsg" specification="_KRVDYIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>pingPort.recallAll();
startPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KRpzgYEiEee4oNt2wclvpA" name="Debug__variablesViewMethod" specification="_KRpzgIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pingsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pingsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pingsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KRs20oEiEee4oNt2wclvpA" name="Debug__variablesChange" specification="_KRsPwIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pingsSent&quot;==tempVarName){
    pingsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KTu3IIEiEee4oNt2wclvpA" name="Debug__sendEvent" specification="_KSgIEIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_KRVDYIEiEee4oNt2wclvpA" name="Debug__recallAllMsg" visibility="private" method="_KRVDYYEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KRpzgIEiEee4oNt2wclvpA" name="Debug__variablesView" visibility="private" method="_KRpzgYEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KRsPwIEiEee4oNt2wclvpA" name="Debug__variablesChange" visibility="private" method="_KRs20oEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KRsPwYEiEee4oNt2wclvpA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KRs20IEiEee4oNt2wclvpA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KRs20YEiEee4oNt2wclvpA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_KSgIEIEiEee4oNt2wclvpA" name="Debug__sendEvent" visibility="private" method="_KTu3IIEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KSgvIIEiEee4oNt2wclvpA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KSruQIEiEee4oNt2wclvpA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KS2GUIEiEee4oNt2wclvpA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTBFcIEiEee4oNt2wclvpA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTBsgIEiEee4oNt2wclvpA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTMEkIEiEee4oNt2wclvpA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTWcoIEiEee4oNt2wclvpA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTWcoYEiEee4oNt2wclvpA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTXDsIEiEee4oNt2wclvpA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KTXDsYEiEee4oNt2wclvpA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KThbwIEiEee4oNt2wclvpA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_UTN08DKHEeeIZIaasUdwVA" name="Ponger" classifierBehavior="_pVZOQDKHEeeIZIaasUdwVA" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_bc83wDKHEeeIZIaasUdwVA" name="pongPort" visibility="public" type="_-CQpQDJjEeeIZIaasUdwVA" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gaTikDKHEeeIZIaasUdwVA" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xzj2kH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_mo-64H4AEee8vPff7YDTwQ" name="pongerTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_8pPtEH4AEee8vPff7YDTwQ" name="pongsSent" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_-7A7YH4AEee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_KNlL0IEiEee4oNt2wclvpA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KN1qgYEiEee4oNt2wclvpA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_KN2RkIEiEee4oNt2wclvpA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KOwQgIEiEee4oNt2wclvpA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KOwQgYEiEee4oNt2wclvpA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KOwQgoEiEee4oNt2wclvpA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KPLuUIEiEee4oNt2wclvpA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_pVZOQDKHEeeIZIaasUdwVA" name="StateMachine" isReentrant="false">
        <region xmi:id="_pViYMDKHEeeIZIaasUdwVA" name="Region">
          <transition xmi:id="_pVsJMjKHEeeIZIaasUdwVA" name="Initial" source="_Kdf3IIEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_y1SQIDKHEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_05Zc8DKHEeeIZIaasUdwVA" name="onPing" source="_KinAoIEiEee4oNt2wclvpA" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_OnWB0DKIEeeIZIaasUdwVA" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::onPing&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_E9Jc8H4BEee8vPff7YDTwQ" name="timeout" source="_Ke3wIIEiEee4oNt2wclvpA" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nJIlIH4BEee8vPff7YDTwQ">
              <language>C++</language>
              <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::timeout&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_LUVBcH4BEee8vPff7YDTwQ" name="keepPlaying" source="_KgLXsIEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KilLcIEiEee4oNt2wclvpA" name="keepPlaying__149">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::keepPlaying&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_MiHqQH4BEee8vPff7YDTwQ" name="endOfRound" source="_KkOKMIEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_dltRoH4CEee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::endOfRound&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kd0nQYEiEee4oNt2wclvpA" name="Debug__Initial" source="_Km3OgIEiEee4oNt2wclvpA" target="_Kdf3IIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd0nQoEiEee4oNt2wclvpA" name="Debug__Initial__82">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;PLAYING&quot;,&quot;onPing&quot;,&quot;WAITING FOR TIMER&quot;,&quot;ping&quot;,&quot;PingPongProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;keepPlaying&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;STARTING ROUND&quot;,&quot;startRound&quot;,&quot;WAITING FOR END OF ROUND&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;ThreePongsSent?&quot;,&quot;endOfRound&quot;,&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR END OF ROUND&quot;,&quot;endRound&quot;,&quot;STARTING ROUND&quot;,&quot;end&quot;,&quot;endProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR TIMER&quot;,&quot;timeout&quot;,&quot;ThreePongsSent?&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_Km9VIIEiEee4oNt2wclvpA" name="ConnectionEstablished" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd11YIEiEee4oNt2wclvpA" name="Debug__Initial__S" guard="_Kd11YoEiEee4oNt2wclvpA" source="_Kdf3IIEiEee4oNt2wclvpA" target="_KdqPMYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_Kd11YoEiEee4oNt2wclvpA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Kd11YYEiEee4oNt2wclvpA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo2&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd3DgIEiEee4oNt2wclvpA" name="Debug__Initial__S__84">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kd4RoIEiEee4oNt2wclvpA" name="Debug__Initial__E" source="_KdwV0IEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd44sIEiEee4oNt2wclvpA" name="Debug__Initial__E__85">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kd6G0IEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd6t4YEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange__87">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_Kd6t4IEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd6t4oEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd7U8IEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint__88">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kd6t44EiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd7U8YEiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd7U84EiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint__89">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kd7U8oEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd78AIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd78AoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints__90">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kd78AYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd8jEIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd8jEoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode__91">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Kd8jEYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kd9KIIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg" source="_KdkIkYEiEee4oNt2wclvpA" target="_KdkIkYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kd9KIoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg__92">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kd9KIYEiEee4oNt2wclvpA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfTN8YEiEee4oNt2wclvpA" name="Debug__timeout" source="_wOD-wH4AEee8vPff7YDTwQ" target="_Ke3wIIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfT1AIEiEee4oNt2wclvpA" name="Debug__timeout__105">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;Debug__Path__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_WL6PAH4BEee8vPff7YDTwQ" port="_mo-64H4AEee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfVDIIEiEee4oNt2wclvpA" name="Debug__timeout__S" guard="_KfVDIoEiEee4oNt2wclvpA" source="_Ke3wIIEiEee4oNt2wclvpA" target="_KfFLgYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KfVDIoEiEee4oNt2wclvpA" name="Debug__Guardtimeout">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KfVDIYEiEee4oNt2wclvpA" name="Debug__Guardtimeout">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfVqMIEiEee4oNt2wclvpA" name="Debug__timeout__S__107">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__S&quot;,(char *)&quot;Debug__Path__timeout&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KfW4UIEiEee4oNt2wclvpA" name="Debug__timeout__E" source="_KfOVcIEiEee4oNt2wclvpA" target="_EMjGcH4BEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfW4UYEiEee4oNt2wclvpA" name="Debug__timeout__E__108">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__timeout__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KfYGcIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__varChange" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfYGcoEiEee4oNt2wclvpA" name="Debug__timeout__dbg__varChange__110">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KfYGcYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfYtgIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__setBreakPoint" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfYtgoEiEee4oNt2wclvpA" name="Debug__timeout__dbg__setBreakPoint__111">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KfYtgYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfZUkIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__remBreakPoint" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfZUkoEiEee4oNt2wclvpA" name="Debug__timeout__dbg__remBreakPoint__112">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KfZUkYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfZUk4EiEee4oNt2wclvpA" name="Debug__timeout__dbg__viewBreakPoints" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfZ7oYEiEee4oNt2wclvpA" name="Debug__timeout__dbg__viewBreakPoints__113">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KfZ7oIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KfaisIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgSetExecMode" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfaisoEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgSetExecMode__114">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KfaisYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kfais4EiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgDeferMsg" source="_Ke92wYEiEee4oNt2wclvpA" target="_Ke92wYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KfbJwIEiEee4oNt2wclvpA" name="Debug__timeout__dbg__dbgDeferMsg__115">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KfaitIEiEee4oNt2wclvpA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kg_3EYEiEee4oNt2wclvpA" name="Debug__keepPlaying" guard="_vwh4wH4BEee8vPff7YDTwQ" source="_EMjGcH4BEee8vPff7YDTwQ" target="_KgLXsIEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_vwh4wH4BEee8vPff7YDTwQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="__ykZAH4BEee8vPff7YDTwQ">
                <language>C++</language>
                <body>bool sendMorePongs = this->pongsSent &lt; 3;&#xD;
return sendMorePongs;</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhAeIIEiEee4oNt2wclvpA" name="Debug__keepPlaying__126">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KhJBAIEiEee4oNt2wclvpA" name="Debug__keepPlaying__S" guard="_KhJoEYEiEee4oNt2wclvpA" source="_KgLXsIEiEee4oNt2wclvpA" target="_KglnYYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KhJoEYEiEee4oNt2wclvpA" name="Debug__GuardkeepPlaying">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KhJoEIEiEee4oNt2wclvpA" name="Debug__GuardkeepPlaying">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhKPIIEiEee4oNt2wclvpA" name="Debug__keepPlaying__S__128">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__S&quot;,(char *)&quot;Debug__Path__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KhNScIEiEee4oNt2wclvpA" name="Debug__keepPlaying__E" source="_Kg2GEIEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhNScYEiEee4oNt2wclvpA" name="Debug__keepPlaying__E__129">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__keepPlaying__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KhOgkIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__varChange" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhUnMIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__varChange__131">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KhUAIIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KhVOQIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__setBreakPoint" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhV1UIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__setBreakPoint__132">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KhVOQYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KhWcYIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__remBreakPoint" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhWcYoEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__remBreakPoint__133">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KhWcYYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KhXDcIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__viewBreakPoints" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhXDcoEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__viewBreakPoints__134">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KhXDcYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KhXqgIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgSetExecMode" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhXqgoEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgSetExecMode__135">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KhXqgYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KhYRkIEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgDeferMsg" source="_KgaoQYEiEee4oNt2wclvpA" target="_KgaoQYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KhYRkoEiEee4oNt2wclvpA" name="Debug__keepPlaying__dbg__dbgDeferMsg__136">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KhYRkYEiEee4oNt2wclvpA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjEToYEiEee4oNt2wclvpA" name="Debug__onPing" source="_pVsJMDKHEeeIZIaasUdwVA" target="_KinAoIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjETooEiEee4oNt2wclvpA" name="Debug__onPing__151">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;Debug__Path__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_OmPtQDKWEee9wJm1xhJVtg" event="_SHYzYDKDEeeIZIaasUdwVA" port="_bc83wDKHEeeIZIaasUdwVA"/>
          </transition>
          <transition xmi:id="_KjFhwIEiEee4oNt2wclvpA" name="Debug__onPing__S" guard="_KjFhwoEiEee4oNt2wclvpA" source="_KinAoIEiEee4oNt2wclvpA" target="_Ki2RMIEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KjFhwoEiEee4oNt2wclvpA" name="Debug__GuardonPing">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KjFhwYEiEee4oNt2wclvpA" name="Debug__GuardonPing">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;PLAYING&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjGI0IEiEee4oNt2wclvpA" name="Debug__onPing__S__153">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__S&quot;,(char *)&quot;Debug__Path__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KjHW8IEiEee4oNt2wclvpA" name="Debug__onPing__E" source="_Ki9l8IEiEee4oNt2wclvpA" target="_wOD-wH4AEee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjHW8YEiEee4oNt2wclvpA" name="Debug__onPing__E__154">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__onPing__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR TIMER&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KjJMIIEiEee4oNt2wclvpA" name="Debug__onPing__dbg__varChange" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjJMIoEiEee4oNt2wclvpA" name="Debug__onPing__dbg__varChange__156">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KjJMIYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjJMI4EiEee4oNt2wclvpA" name="Debug__onPing__dbg__setBreakPoint" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjJzMYEiEee4oNt2wclvpA" name="Debug__onPing__dbg__setBreakPoint__157">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KjJzMIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjJzMoEiEee4oNt2wclvpA" name="Debug__onPing__dbg__remBreakPoint" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjKaQIEiEee4oNt2wclvpA" name="Debug__onPing__dbg__remBreakPoint__158">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KjJzM4EiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjLBUIEiEee4oNt2wclvpA" name="Debug__onPing__dbg__viewBreakPoints" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjLBUoEiEee4oNt2wclvpA" name="Debug__onPing__dbg__viewBreakPoints__159">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KjLBUYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjLBU4EiEee4oNt2wclvpA" name="Debug__onPing__dbg__dbgSetExecMode" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjLoYYEiEee4oNt2wclvpA" name="Debug__onPing__dbg__dbgSetExecMode__160">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KjLoYIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KjLoYoEiEee4oNt2wclvpA" name="Debug__onPing__dbg__dbgDeferMsg" source="_KiuVYIEiEee4oNt2wclvpA" target="_KiuVYIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjLoZIEiEee4oNt2wclvpA" name="Debug__onPing__dbg__dbgDeferMsg__161">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KjLoY4EiEee4oNt2wclvpA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kk3DYIEiEee4oNt2wclvpA" name="Debug__endOfRound" source="_EMjGcH4BEee8vPff7YDTwQ" target="_KkOKMIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kk3DYYEiEee4oNt2wclvpA" name="Debug__endOfRound__177">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound&quot;,(char *)&quot;ThreePongsSent?&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kk7U0IEiEee4oNt2wclvpA" name="Debug__endOfRound__S" guard="_Kk774YEiEee4oNt2wclvpA" source="_KkOKMIEiEee4oNt2wclvpA" target="_KkiTQYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_Kk774YEiEee4oNt2wclvpA" name="Debug__GuardendOfRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_Kk774IEiEee4oNt2wclvpA" name="Debug__GuardendOfRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;ThreePongsSent?&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kk9xEIEiEee4oNt2wclvpA" name="Debug__endOfRound__S__179">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__S&quot;,(char *)&quot;Debug__Path__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KlG7AIEiEee4oNt2wclvpA" name="Debug__endOfRound__E" source="_KkuggIEiEee4oNt2wclvpA" target="_pVsJMDKHEeeIZIaasUdwVA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlG7AYEiEee4oNt2wclvpA" name="Debug__endOfRound__E__180">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__endOfRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KlLMcIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__varChange" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlLMcoEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__varChange__182">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KlLMcYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KlLzgIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__setBreakPoint" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlMakIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__setBreakPoint__183">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KlLzgYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KlNBoIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__remBreakPoint" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlNosIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__remBreakPoint__184">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KlNBoYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KlO20IEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__viewBreakPoints" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlPd4IEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__viewBreakPoints__185">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KlO20YEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KlQE8IEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgSetExecMode" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlQE8oEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgSetExecMode__186">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KlQE8YEiEee4oNt2wclvpA" name="Debug__MSG" port="_KNlL0IEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KlQsAIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgDeferMsg" source="_KkVe8IEiEee4oNt2wclvpA" target="_KkVe8IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlRTEIEiEee4oNt2wclvpA" name="Debug__endOfRound__dbg__dbgDeferMsg__187">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KlQsAYEiEee4oNt2wclvpA" name="Debug__MSG" port="_bc83wDKHEeeIZIaasUdwVA">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_Km8uEIEiEee4oNt2wclvpA" name="Debug__InitDebug" source="_pViYMTKHEeeIZIaasUdwVA" target="_Km3OgIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Km8uEYEiEee4oNt2wclvpA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_pViYMTKHEeeIZIaasUdwVA" name="Pseudo2"/>
          <subvertex xmi:type="uml:State" xmi:id="_pVsJMDKHEeeIZIaasUdwVA" name="PLAYING">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KnGfEIEiEee4oNt2wclvpA" name="PLAYING__201">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KnHGIIEiEee4oNt2wclvpA" name="PLAYING__202">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_wOD-wH4AEee8vPff7YDTwQ" name="WAITING FOR TIMER">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KnFQ8IEiEee4oNt2wclvpA" name="WAITING FOR TIMER__199">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KnFQ8YEiEee4oNt2wclvpA" name="WAITING FOR TIMER__200">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_EMjGcH4BEee8vPff7YDTwQ" name="ThreePongsSent?" kind="choice"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Kdf3IIEiEee4oNt2wclvpA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KdkIkYEiEee4oNt2wclvpA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_KdqPMYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KdwV0IEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KdkIkoEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KeLzooEiEee4oNt2wclvpA" name="Debug__init__trans__Initial" source="_KdqPMYEiEee4oNt2wclvpA" target="_KeJ-cIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KepGoIEiEee4oNt2wclvpA" name="Debug__init__trans__Initial__97">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KeLzo4EiEee4oNt2wclvpA" name="Debug__Ac__Initial" source="_KeJ-cIEiEee4oNt2wclvpA" target="_KeLMkIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KeMasYEiEee4oNt2wclvpA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.log(&quot;Ponger is ready&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KeMasIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KeMasoEiEee4oNt2wclvpA" name="Debug__En__PLAYING" source="_KeLMkIEiEee4oNt2wclvpA" target="_KeLzoIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KexCcIEiEee4oNt2wclvpA" name="Debug__En__PLAYING__100">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KeMas4EiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KeMatIEiEee4oNt2wclvpA" name="Debug__end__trans__Initial" source="_KeLzoIEiEee4oNt2wclvpA" target="_KdwV0IEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KeyQkIEiEee4oNt2wclvpA" name="Debug__end__trans__Initial__102">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KeMatYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KeJ-cIEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KeJ-cYEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KeR6QIEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial__93">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KeLMkIEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KeLMkYEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KeZ2EIEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial__94">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KeLzoIEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KeLzoYEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kef8sYEiEee4oNt2wclvpA" name="Debug__A__En__Initial__95">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_Ke3wIIEiEee4oNt2wclvpA" name="Debug__Path__timeout" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_Ke92wYEiEee4oNt2wclvpA" name="Debug__C__timeout">
            <connectionPoint xmi:id="_KfFLgYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KfOVcIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_Ke92woEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KfkTsoEiEee4oNt2wclvpA" name="Debug__init__trans__timeout" source="_KfFLgYEiEee4oNt2wclvpA" target="_Kfh3cIEiEee4oNt2wclvpA"/>
              <transition xmi:id="_Kfk6wIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR TIMER" source="_Kfh3cIEiEee4oNt2wclvpA" target="_KfjFkIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KgBmsIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR TIMER__120">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kfk6wYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kfk6woEiEee4oNt2wclvpA" name="Debug__AC__timeout" source="_KfjFkIEiEee4oNt2wclvpA" target="_KfkTsIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kfk6xIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>pongPort.pong().send();&#xD;
this->pongsSent++;&#xD;
log.show(&quot;pong message sent.\n&quot;);
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__AC__timeout&quot;,(char *)&quot;Debug__B__Ac__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kfk6w4EiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_Kflh0IEiEee4oNt2wclvpA" name="Debug__end__trans__timeout" source="_KfkTsIEiEee4oNt2wclvpA" target="_KfOVcIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KgFREIEiEee4oNt2wclvpA" name="Debug__end__trans__timeout__123">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__end__trans__timeout&quot;,(char *)&quot;Debug__A__Ac__timeout&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_Kflh0YEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Kfh3cIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kfh3cYEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KfrBYYEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR TIMER__116">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ex__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KfjFkIEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KfjFkYEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kf31sIEiEee4oNt2wclvpA" name="Debug__B__Ac__timeout__117">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__B__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KfkTsIEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KfkTsYEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;timeout&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kf-jYIEiEee4oNt2wclvpA" name="Debug__A__Ac__timeout__118">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__timeout::Region1::Debug__A__Ac__timeout&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KgLXsIEiEee4oNt2wclvpA" name="Debug__Path__keepPlaying" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KgaoQYEiEee4oNt2wclvpA" name="Debug__C__keepPlaying">
            <connectionPoint xmi:id="_KglnYYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Kg2GEIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KgaoQoEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KhzIUoEiEee4oNt2wclvpA" name="Debug__init__trans__keepPlaying" source="_KglnYYEiEee4oNt2wclvpA" target="_KhxTIYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KiUswIEiEee4oNt2wclvpA" name="Debug__init__trans__keepPlaying__141">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__init__trans__keepPlaying&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KhzvYIEiEee4oNt2wclvpA" name="Debug__Ac__keepPlaying" source="_KhxTIYEiEee4oNt2wclvpA" target="_Khx6MIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KifE0IEiEee4oNt2wclvpA" name="Debug__Ac__keepPlaying__143">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__Ac__keepPlaying&quot;,(char *)&quot;Debug__B__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KhzvYYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KhzvYoEiEee4oNt2wclvpA" name="Debug__En__PLAYING" source="_Khx6MIEiEee4oNt2wclvpA" target="_KhzIUIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KihhEIEiEee4oNt2wclvpA" name="Debug__En__PLAYING__145">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KhzvY4EiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KhzvZIEiEee4oNt2wclvpA" name="Debug__end__trans__keepPlaying" source="_KhzIUIEiEee4oNt2wclvpA" target="_Kg2GEIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kij9UIEiEee4oNt2wclvpA" name="Debug__end__trans__keepPlaying__147">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__end__trans__keepPlaying&quot;,(char *)&quot;Debug__A__En__keepPlaying&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KhzvZYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KhxTIYEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KhxTIoEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kh5O8IEiEee4oNt2wclvpA" name="Debug__B__Ac__keepPlaying__137">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__B__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Khx6MIEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Khx6MYEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;keepPlaying&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KiE1IYEiEee4oNt2wclvpA" name="Debug__A__Ac__keepPlaying__138">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__Ac__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KhzIUIEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KhzIUYEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KiTeoYEiEee4oNt2wclvpA" name="Debug__A__En__keepPlaying__139">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__keepPlaying::Region1::Debug__A__En__keepPlaying&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KinAoIEiEee4oNt2wclvpA" name="Debug__Path__onPing" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KiuVYIEiEee4oNt2wclvpA" name="Debug__C__onPing">
            <connectionPoint xmi:id="_Ki2RMIEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_Ki9l8IEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KiuVYYEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KjUyUIEiEee4oNt2wclvpA" name="Debug__init__trans__onPing" source="_Ki2RMIEiEee4oNt2wclvpA" target="_KjRH8YEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kj7PQIEiEee4oNt2wclvpA" name="Debug__init__trans__onPing__167">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__init__trans__onPing&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KjUyUYEiEee4oNt2wclvpA" name="Debug__Ex__PLAYING" source="_KjRH8YEiEee4oNt2wclvpA" target="_KjRvAIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KkG1cIEiEee4oNt2wclvpA" name="Debug__Ex__PLAYING__169">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ex__PLAYING&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KjUyUoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KjVZYIEiEee4oNt2wclvpA" name="Debug__AC__onPing" source="_KjRvAIEiEee4oNt2wclvpA" target="_KjSWEIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KjVZYoEiEee4oNt2wclvpA" name="Effect" visibility="public" isReentrant="false">
                  <language>C++</language>
                  <body>log.show(&quot;ping received.\n&quot;);&#xD;
pongerTimer.informIn(UMLRTTimespec(1,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__AC__onPing&quot;,(char *)&quot;Debug__B__Ac__onPing&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KjVZYYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KjWAcIEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR TIMER" source="_KjSWEIEiEee4oNt2wclvpA" target="_KjS9IIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KkJRsIEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR TIMER__172">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__En__WAITING FOR TIMER&quot;,(char *)&quot;Debug__A__Ac__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KjWAcYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KjWAcoEiEee4oNt2wclvpA" name="Debug__end__trans__onPing" source="_KjS9IIEiEee4oNt2wclvpA" target="_Ki9l8IEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KkJ4wIEiEee4oNt2wclvpA" name="Debug__end__trans__onPing__174">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__end__trans__onPing&quot;,(char *)&quot;Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KjWngIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KjRH8YEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KjRH8oEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KjiNsYEiEee4oNt2wclvpA" name="Debug__B__Ex__PLAYING__162">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ex__PLAYING&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KjRvAIEiEee4oNt2wclvpA" name="Debug__B__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KjRvAYEiEee4oNt2wclvpA" name="Debug__B__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KjoUUIEiEee4oNt2wclvpA" name="Debug__B__Ac__onPing__163">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__B__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KjSWEIEiEee4oNt2wclvpA" name="Debug__A__Ac__onPing">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KjSWEYEiEee4oNt2wclvpA" name="Debug__A__Ac__onPing">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;onPing&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KjvpEIEiEee4oNt2wclvpA" name="Debug__A__Ac__onPing__164">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__Ac__onPing&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KjS9IIEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR TIMER">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KjS9IYEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR TIMER">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR TIMER&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KjwQIIEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR TIMER__165">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__onPing::Region1::Debug__A__En__WAITING FOR TIMER&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KkOKMIEiEee4oNt2wclvpA" name="Debug__Path__endOfRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KkVe8IEiEee4oNt2wclvpA" name="Debug__C__endOfRound">
            <connectionPoint xmi:id="_KkiTQYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KkuggIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KkVe8YEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KlofcIEiEee4oNt2wclvpA" name="Debug__init__trans__endOfRound" source="_KkiTQYEiEee4oNt2wclvpA" target="_KleHYIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KmgCIIEiEee4oNt2wclvpA" name="Debug__init__trans__endOfRound__192">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__init__trans__endOfRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KlofcYEiEee4oNt2wclvpA" name="Debug__Ac__endOfRound" source="_KleHYIEiEee4oNt2wclvpA" target="_KleucYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KlpGgIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;ending round.\n&quot;);&#xD;
endPort.end().send();&#xD;
this->pongsSent = 0;
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__Ac__endOfRound&quot;,(char *)&quot;Debug__B__Ac__endOfRound&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KlofcoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KlpGgYEiEee4oNt2wclvpA" name="Debug__En__PLAYING" source="_KleucYEiEee4oNt2wclvpA" target="_Klk1EIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KmuroIEiEee4oNt2wclvpA" name="Debug__En__PLAYING__195">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__En__PLAYING&quot;,(char *)&quot;Debug__A__Ac__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KlpGgoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KlpGg4EiEee4oNt2wclvpA" name="Debug__end__trans__endOfRound" source="_Klk1EIEiEee4oNt2wclvpA" target="_KkuggIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KmyWAIEiEee4oNt2wclvpA" name="Debug__end__trans__endOfRound__197">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__end__trans__endOfRound&quot;,(char *)&quot;Debug__A__En__endOfRound&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KlpGhIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KNlL0IEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KleHYIEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KleucIEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KlxpYIEiEee4oNt2wclvpA" name="Debug__B__Ac__endOfRound__188">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__B__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KleucYEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KleucoEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endOfRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kl5lMIEiEee4oNt2wclvpA" name="Debug__A__Ac__endOfRound__189">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__Ac__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Klk1EIEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KllcIIEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;PLAYING&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KmfbEIEiEee4oNt2wclvpA" name="Debug__A__En__endOfRound__190">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Ponger::StateMachine::Region::Debug__C__endOfRound::Region1::Debug__A__En__endOfRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_Km3OgIEiEee4oNt2wclvpA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KNj9sYEiEee4oNt2wclvpA" name="Debug__recallAllMsg" specification="_KNj9sIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>pongPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KOfKwYEiEee4oNt2wclvpA" name="Debug__variablesViewMethod" specification="_KOfKwIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;pongsSent,&quot;);
tempS.append(&quot;Integer,&quot;);
if(pongsSent!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,pongsSent);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KOvpcIEiEee4oNt2wclvpA" name="Debug__variablesChange" specification="_KOntoIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;pongsSent&quot;==tempVarName){
    pongsSent=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KRQK4IEiEee4oNt2wclvpA" name="Debug__sendEvent" specification="_KP3DwIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_KNj9sIEiEee4oNt2wclvpA" name="Debug__recallAllMsg" visibility="private" method="_KNj9sYEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KOfKwIEiEee4oNt2wclvpA" name="Debug__variablesView" visibility="private" method="_KOfKwYEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KOntoIEiEee4oNt2wclvpA" name="Debug__variablesChange" visibility="private" method="_KOvpcIEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KOo7wIEiEee4oNt2wclvpA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KOpi0IEiEee4oNt2wclvpA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KOvCYIEiEee4oNt2wclvpA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_KP3DwIEiEee4oNt2wclvpA" name="Debug__sendEvent" visibility="private" method="_KRQK4IEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KP3q0IEiEee4oNt2wclvpA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQD4EIEiEee4oNt2wclvpA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQO3MIEiEee4oNt2wclvpA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQeHwIEiEee4oNt2wclvpA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQeHwYEiEee4oNt2wclvpA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQpG4IEiEee4oNt2wclvpA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQ3wYIEiEee4oNt2wclvpA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQ4XcIEiEee4oNt2wclvpA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQ4XcYEiEee4oNt2wclvpA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KQ4-gIEiEee4oNt2wclvpA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KRD9oIEiEee4oNt2wclvpA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_oVoIcDKJEeeIZIaasUdwVA" name="Top" isActive="true">
      <ownedAttribute xmi:id="_sKndADKJEeeIZIaasUdwVA" name="pinger" visibility="protected" type="_IYQmMDKEEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_x3YykDKJEeeIZIaasUdwVA" name="ponger" visibility="protected" type="_UTN08DKHEeeIZIaasUdwVA" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:id="_Uy91MH34Eee8vPff7YDTwQ" name="referee" visibility="protected" type="_VPgAMH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:id="_61R6oDKJEeeIZIaasUdwVA" name="RTConnector1">
        <end xmi:id="_62BhgDKJEeeIZIaasUdwVA" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_uF7scDKEEeeIZIaasUdwVA"/>
        <end xmi:id="_62BhgTKJEeeIZIaasUdwVA" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_bc83wDKHEeeIZIaasUdwVA"/>
      </ownedConnector>
      <ownedConnector xmi:id="_olDfoH34Eee8vPff7YDTwQ" name="RTConnector2">
        <end xmi:id="_olI_MH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_coBs8H34Eee8vPff7YDTwQ"/>
        <end xmi:id="_olJmQH34Eee8vPff7YDTwQ" partWithPort="_sKndADKJEeeIZIaasUdwVA" role="_ipVIEH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
      <ownedConnector xmi:id="_8-nZwH34Eee8vPff7YDTwQ" name="RTConnector3">
        <end xmi:id="_8-rEIH34Eee8vPff7YDTwQ" partWithPort="_x3YykDKJEeeIZIaasUdwVA" role="_xzj2kH34Eee8vPff7YDTwQ"/>
        <end xmi:id="_8-rrMH34Eee8vPff7YDTwQ" partWithPort="_Uy91MH34Eee8vPff7YDTwQ" role="_uEbSYH34Eee8vPff7YDTwQ"/>
      </ownedConnector>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_VPgAMH34Eee8vPff7YDTwQ" name="Referee" classifierBehavior="_b26uMH36Eee8vPff7YDTwQ" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_coBs8H34Eee8vPff7YDTwQ" name="startPort" visibility="public" type="_dglsoH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_uEbSYH34Eee8vPff7YDTwQ" name="endPort" visibility="public" type="_wEGEEH34Eee8vPff7YDTwQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true"/>
      <ownedAttribute xmi:id="_sjufMH35Eee8vPff7YDTwQ" name="round" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_B57nwH36Eee8vPff7YDTwQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_gTLeIH36Eee8vPff7YDTwQ" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_hE7rMH36Eee8vPff7YDTwQ" name="refereeTimer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_KTyhgIEiEee4oNt2wclvpA" name="extComm" visibility="protected" isBehavior="true" isConjugated="true" isService="false">
        <type xmi:type="uml:Collaboration" href="../CommGateWay/model.uml#_KS0icDCLEeaxYMPe_sHEiw"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KT4oIIEiEee4oNt2wclvpA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_KT4oIYEiEee4oNt2wclvpA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KUOmYIEiEee4oNt2wclvpA" name="Debug__flag">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KUOmYYEiEee4oNt2wclvpA" name="Debug__variablesData">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KUPNcIEiEee4oNt2wclvpA" name="Debug__event">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KUY-cIEiEee4oNt2wclvpA" name="Debug__SRO">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_b26uMH36Eee8vPff7YDTwQ" name="RefereeStateMachine" isReentrant="false">
        <region xmi:id="_b3xCwH36Eee8vPff7YDTwQ" name="Region">
          <transition xmi:id="_b4GZ8H36Eee8vPff7YDTwQ" name="Initial" source="_KWaXsIEiEee4oNt2wclvpA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_2zOjoH36Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Initial&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_BTk88H37Eee8vPff7YDTwQ" name="startRound" source="_KbCZAIEiEee4oNt2wclvpA" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_kD7WcH37Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::startRound&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_F5PggH37Eee8vPff7YDTwQ" name="endRound" source="_KYolQIEiEee4oNt2wclvpA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Bq7QgH38Eee8vPff7YDTwQ">
              <language>C++</language>
              <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::endRound&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KWwV8IEiEee4oNt2wclvpA" name="Debug__Initial" source="_KdOKUIEiEee4oNt2wclvpA" target="_KWaXsIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KWw9AIEiEee4oNt2wclvpA" name="Debug__Initial__3">
              <language>C++</language>
              <body>if (this->Debug__SRO.getExecMode()==Stepping){
Debug__SRO.addTransitionsFromState(&quot;STARTING ROUND&quot;,&quot;startRound&quot;,&quot;WAITING FOR END OF ROUND&quot;,&quot;timeout&quot;,&quot;Timing&quot;);
Debug__SRO.addTransitionsFromState(&quot;WAITING FOR END OF ROUND&quot;,&quot;endRound&quot;,&quot;STARTING ROUND&quot;,&quot;end&quot;,&quot;endProtocol&quot;);
Debug__SRO.addTransitionsFromState(&quot;&quot;,&quot;Initial&quot;,&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;);
std::cout&lt;&lt;this->getName()&lt;&lt;&quot;: Connection with debugger is in progress\n&quot;;
char  tempS[256];
sprintf(tempS,&quot;%s%d&quot;,this->getName(),(int)this->getIndex());
extComm.registerToControl(tempS).send();
Debug__sendEvent(debugEvents::DEBUG,debugEvents::REGISTER,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
}
</body>
            </effect>
            <trigger xmi:id="_KdWtMIEiEee4oNt2wclvpA" name="ConnectionEstablished" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_PQtAwOzeEeSRtqCWFwOf8g"/>
            </trigger>
          </transition>
          <transition xmi:id="_KW1OcIEiEee4oNt2wclvpA" name="Debug__Initial__S" guard="_KW2ckIEiEee4oNt2wclvpA" source="_KWaXsIEiEee4oNt2wclvpA" target="_KWkvwYEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KW2ckIEiEee4oNt2wclvpA" name="Debug__GuardInitial">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KW11gIEiEee4oNt2wclvpA" name="Debug__GuardInitial">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;Pseudo1&quot;,&quot;&quot;,&quot;&quot;,1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KW3qsIEiEee4oNt2wclvpA" name="Debug__Initial__S__5">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__S&quot;,(char *)&quot;Debug__Path__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KW78IIEiEee4oNt2wclvpA" name="Debug__Initial__E" source="_KWqPUYEiEee4oNt2wclvpA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KW8jMIEiEee4oNt2wclvpA" name="Debug__Initial__E__6">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__Initial__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KXEfAIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXFGEYEiEee4oNt2wclvpA" name="Debug__Initial__dbg__varChange__8">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KXFGEIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KXFtIIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXGUMIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__setBreakPoint__9">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KXFtIYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KXGUMYEiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXG7QYEiEee4oNt2wclvpA" name="Debug__Initial__dbg__remBreakPoint__10">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KXG7QIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KXHiUIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXHiUoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__viewBreakPoints__11">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KXHiUYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KXHiU4EiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXIJYYEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgSetExecMode__12">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KXIJYIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KXIJYoEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg" source="_KWf3QIEiEee4oNt2wclvpA" target="_KWf3QIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXIwcIEiEee4oNt2wclvpA" name="Debug__Initial__dbg__dbgDeferMsg__13">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KXIJY4EiEee4oNt2wclvpA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZGfUYEiEee4oNt2wclvpA" name="Debug__endRound" source="_63lJ4H36Eee8vPff7YDTwQ" target="_KYolQIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZHGYIEiEee4oNt2wclvpA" name="Debug__endRound__26">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__Path__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_IRX1gH37Eee8vPff7YDTwQ" event="_IsvNwH35Eee8vPff7YDTwQ" port="_uEbSYH34Eee8vPff7YDTwQ"/>
          </transition>
          <transition xmi:id="_KZI7kIEiEee4oNt2wclvpA" name="Debug__endRound__S" guard="_KZJioYEiEee4oNt2wclvpA" source="_KYolQIEiEee4oNt2wclvpA" target="_KY0ygIEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KZJioYEiEee4oNt2wclvpA" name="Debug__GuardendRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KZJioIEiEee4oNt2wclvpA" name="Debug__GuardendRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZN0EIEiEee4oNt2wclvpA" name="Debug__endRound__S__28">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__S&quot;,(char *)&quot;Debug__Path__endRound&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KZQQUIEiEee4oNt2wclvpA" name="Debug__endRound__E" source="_KY9VYIEiEee4oNt2wclvpA" target="_b4A6YH36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZQ3YIEiEee4oNt2wclvpA" name="Debug__endRound__E__29">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__endRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KZYzMIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__varChange" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZZaQIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__varChange__31">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KZYzMYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZZaQYEiEee4oNt2wclvpA" name="Debug__endRound__dbg__setBreakPoint" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZaBUIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__setBreakPoint__32">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KZZaQoEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZaoYIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__remBreakPoint" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZaoYoEiEee4oNt2wclvpA" name="Debug__endRound__dbg__remBreakPoint__33">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KZaoYYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZgH8IEiEee4oNt2wclvpA" name="Debug__endRound__dbg__viewBreakPoints" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZgH8oEiEee4oNt2wclvpA" name="Debug__endRound__dbg__viewBreakPoints__34">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KZgH8YEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZgvAIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__dbgSetExecMode" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZgvAoEiEee4oNt2wclvpA" name="Debug__endRound__dbg__dbgSetExecMode__35">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_KZgvAYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KZlngIEiEee4oNt2wclvpA" name="Debug__endRound__dbg__dbgDeferMsg" source="_KYuE0IEiEee4oNt2wclvpA" target="_KYuE0IEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KZmOkYEiEee4oNt2wclvpA" name="Debug__endRound__dbg__dbgDeferMsg__36">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_KZmOkIEiEee4oNt2wclvpA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KbfsAYEiEee4oNt2wclvpA" name="Debug__startRound" source="_b4A6YH36Eee8vPff7YDTwQ" target="_KbCZAIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kbg6IIEiEee4oNt2wclvpA" name="Debug__startRound__52">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound&quot;,(char *)&quot;STARTING ROUND&quot;,(char *)&quot;Debug__Path__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
            </effect>
            <trigger xmi:id="_DVRH4H37Eee8vPff7YDTwQ" port="_hE7rMH36Eee8vPff7YDTwQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_IaEO8HDxEeSwWKwNKw1iAA"/>
            </trigger>
          </transition>
          <transition xmi:id="_KbkkgIEiEee4oNt2wclvpA" name="Debug__startRound__S" guard="_KblyoYEiEee4oNt2wclvpA" source="_KbCZAIEiEee4oNt2wclvpA" target="_KbLi8IEiEee4oNt2wclvpA">
            <ownedRule xmi:id="_KblyoYEiEee4oNt2wclvpA" name="Debug__GuardstartRound">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_KblyoIEiEee4oNt2wclvpA" name="Debug__GuardstartRound">
                <language>C++</language>
                <body>return Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,msg->destPort->role()->protocol,msg->getSignalName(),1,TransitionEffectBreakPoint,0);
</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KbmZsIEiEee4oNt2wclvpA" name="Debug__startRound__S__54">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__S&quot;,(char *)&quot;Debug__Path__startRound&quot;,(char *)&quot;en&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_Kbr5QIEiEee4oNt2wclvpA" name="Debug__startRound__E" source="_KbSQoIEiEee4oNt2wclvpA" target="_63lJ4H36Eee8vPff7YDTwQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KbtHYIEiEee4oNt2wclvpA" name="Debug__startRound__E__55">
              <language>C++</language>
              <body>this->Debug__recallAllMsg();

Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__startRound__E&quot;,(char *)&quot;ex&quot;,(char *)&quot;WAITING FOR END OF ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:id="_KbzOAIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__varChange" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb0cIIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__varChange__57">
              <language>C++</language>
              <body>char varName1[256];
char varValue1[1024];
sprintf(varName1,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
sprintf(varValue1,&quot;%s&quot;,(*(const char * *)msg->getParam( 1 )));
this->Debug__variablesChange(varName1,varValue1);
</body>
            </effect>
            <trigger xmi:id="_KbzOAYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_PsaK0LjWEeaJ1dlMn1j7GQ"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kb24YIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__setBreakPoint" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb3fcIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__setBreakPoint__58">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.addBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kb24YYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HctYoECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kb4GgIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__remBreakPoint" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb4GgoEiEee4oNt2wclvpA" name="Debug__startRound__dbg__remBreakPoint__59">
              <language>C++</language>
              <body>char loc[1024];
sprintf(loc,&quot;%s&quot;,(*(const char * *)msg->getParam( 0 )));
this->Debug__SRO.remBreakPoint(loc,(BreakPointType)( *(int *)msg->getParam( 1 ) ),( *(int *)msg->getParam( 2 ) ));
std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kb4GgYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_HvALgEAyEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kb4tkIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__viewBreakPoints" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb4tkoEiEee4oNt2wclvpA" name="Debug__startRound__dbg__viewBreakPoints__60">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->Debug__SRO.serializeBreakPoint()&lt;&lt;&quot;n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kb4tkYEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_t2NqIECVEeev_-3F68RaHA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kb4tk4EiEee4oNt2wclvpA" name="Debug__startRound__dbg__dbgSetExecMode" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb4tlYEiEee4oNt2wclvpA" name="Debug__startRound__dbg__dbgSetExecMode__61">
              <language>C++</language>
              <body>this->Debug__SRO.setExecMode((ExecMode)( *(int *)msg->getParam( 0 ) ));
</body>
            </effect>
            <trigger xmi:id="_Kb4tlIEiEee4oNt2wclvpA" name="Debug__MSG" port="_KTyhgIEiEee4oNt2wclvpA">
              <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_2Nc34EEDEee0eeIrP9Q9KA"/>
            </trigger>
          </transition>
          <transition xmi:id="_Kb5UoIEiEee4oNt2wclvpA" name="Debug__startRound__dbg__dbgDeferMsg" source="_KbGqcYEiEee4oNt2wclvpA" target="_KbGqcYEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Kb5UooEiEee4oNt2wclvpA" name="Debug__startRound__dbg__dbgDeferMsg__62">
              <language>C++</language>
              <body>msg->defer();
std::cout&lt;&lt;&quot;A message defered&quot;&lt;&lt;&quot;\n&quot;;
</body>
            </effect>
            <trigger xmi:id="_Kb5UoYEiEee4oNt2wclvpA" name="Debug__MSG" port="_uEbSYH34Eee8vPff7YDTwQ">
              <event xmi:type="uml:AnyReceiveEvent" href="../CommGateWay/model.uml#_KTIEcDCLEeaxYMPe_sHEiw"/>
            </trigger>
          </transition>
          <transition xmi:id="_KdWGIIEiEee4oNt2wclvpA" name="Debug__InitDebug" source="_b317QH36Eee8vPff7YDTwQ" target="_KdOKUIEiEee4oNt2wclvpA">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KdWGIYEiEee4oNt2wclvpA" name="DebugCheck">
              <language>C++</language>
              <body>std::cout&lt;&lt;this->getName()&lt;&lt;&quot; : is Starting\n&quot;;
    this->Debug__SRO.setExecMode(Stepping);
</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_b317QH36Eee8vPff7YDTwQ" name="Pseudo1"/>
          <subvertex xmi:type="uml:State" xmi:id="_b4A6YH36Eee8vPff7YDTwQ" name="STARTING ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KdX7UIEiEee4oNt2wclvpA" name="STARTING ROUND__77">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KdYiYIEiEee4oNt2wclvpA" name="STARTING ROUND__78">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_63lJ4H36Eee8vPff7YDTwQ" name="WAITING FOR END OF ROUND">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KdaXkIEiEee4oNt2wclvpA" name="WAITING FOR END OF ROUND__79">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </entry>
            <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kda-oIEiEee4oNt2wclvpA" name="WAITING FOR END OF ROUND__80">
              <language>C++</language>
              <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
            </exit>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KWaXsIEiEee4oNt2wclvpA" name="Debug__Path__Initial" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KWf3QIEiEee4oNt2wclvpA" name="Debug__C__Initial">
            <connectionPoint xmi:id="_KWkvwYEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KWqPUYEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KWf3QYEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KXTIgIEiEee4oNt2wclvpA" name="Debug__init__trans__Initial" source="_KWkvwYEiEee4oNt2wclvpA" target="_KXQFMIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KYcYAIEiEee4oNt2wclvpA" name="Debug__init__trans__Initial__18">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__init__trans__Initial&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KXTIgYEiEee4oNt2wclvpA" name="Debug__Ac__Initial" source="_KXQFMIEiEee4oNt2wclvpA" target="_KXQsQIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KXYoEIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__Ac__Initial&quot;,(char *)&quot;Debug__B__Ac__Initial&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KXTIgoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KXZPIIEiEee4oNt2wclvpA" name="Debug__En__STARTING ROUND" source="_KXQsQIEiEee4oNt2wclvpA" target="_KXRTUIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KYh3kIEiEee4oNt2wclvpA" name="Debug__En__STARTING ROUND__21">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KXZPIYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KXZ2MIEiEee4oNt2wclvpA" name="Debug__end__trans__Initial" source="_KXRTUIEiEee4oNt2wclvpA" target="_KWqPUYEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KYjFsIEiEee4oNt2wclvpA" name="Debug__end__trans__Initial__23">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__end__trans__Initial&quot;,(char *)&quot;Debug__A__En__Initial&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KXadQIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KXQFMIEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KXQFMYEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KXhK8IEiEee4oNt2wclvpA" name="Debug__B__Ac__Initial__14">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__B__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KXQsQIEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KXQsQYEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;Initial&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KXq78IEiEee4oNt2wclvpA" name="Debug__A__Ac__Initial__15">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__Ac__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KXRTUIEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KXRTUYEiEee4oNt2wclvpA" name="Debug__A__En__Initial">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KX1UAIEiEee4oNt2wclvpA" name="Debug__A__En__Initial__16">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__Initial::Region1::Debug__A__En__Initial&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KYolQIEiEee4oNt2wclvpA" name="Debug__Path__endRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KYuE0IEiEee4oNt2wclvpA" name="Debug__C__endRound">
            <connectionPoint xmi:id="_KY0ygIEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KY9VYIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KYuE0YEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KZ_3MIEiEee4oNt2wclvpA" name="Debug__init__trans__endRound" source="_KY0ygIEiEee4oNt2wclvpA" target="_KZ0RAIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KayhYIEiEee4oNt2wclvpA" name="Debug__init__trans__endRound__42">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__init__trans__endRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KZ_3MYEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR END OF ROUND" source="_KZ0RAIEiEee4oNt2wclvpA" target="_KZ4icIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ka2LwIEiEee4oNt2wclvpA" name="Debug__Ex__WAITING FOR END OF ROUND__44">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KaAeQIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KaBFUIEiEee4oNt2wclvpA" name="Debug__AC__endRound" source="_KZ4icIEiEee4oNt2wclvpA" target="_KZ8z4IEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KaBsYIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;round %d finished.\n&quot;, this->round);&#xD;
this->round++;&#xD;
refereeTimer.informIn(UMLRTTimespec(4,0));
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__AC__endRound&quot;,(char *)&quot;Debug__B__Ac__endRound&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KaBFUYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KaBsYYEiEee4oNt2wclvpA" name="Debug__En__STARTING ROUND" source="_KZ8z4IEiEee4oNt2wclvpA" target="_KZ_QIIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ka9ggIEiEee4oNt2wclvpA" name="Debug__En__STARTING ROUND__47">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__En__STARTING ROUND&quot;,(char *)&quot;Debug__A__Ac__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KaCTcIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KaC6gIEiEee4oNt2wclvpA" name="Debug__end__trans__endRound" source="_KZ_QIIEiEee4oNt2wclvpA" target="_KY9VYIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_Ka-uoIEiEee4oNt2wclvpA" name="Debug__end__trans__endRound__49">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__end__trans__endRound&quot;,(char *)&quot;Debug__A__En__STARTING ROUND&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KaC6gYEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_KZ0RAIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KZ0RAYEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KaJoMIEiEee4oNt2wclvpA" name="Debug__B__Ex__WAITING FOR END OF ROUND__37">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ex__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KZ4icIEiEee4oNt2wclvpA" name="Debug__B__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KZ4icYEiEee4oNt2wclvpA" name="Debug__B__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KagNgIEiEee4oNt2wclvpA" name="Debug__B__Ac__endRound__38">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__B__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KZ8z4IEiEee4oNt2wclvpA" name="Debug__A__Ac__endRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KZ-CAIEiEee4oNt2wclvpA" name="Debug__A__Ac__endRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;endRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KaowYIEiEee4oNt2wclvpA" name="Debug__A__Ac__endRound__39">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__Ac__endRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KZ_QIIEiEee4oNt2wclvpA" name="Debug__A__En__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KZ_QIYEiEee4oNt2wclvpA" name="Debug__A__En__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KaqlkIEiEee4oNt2wclvpA" name="Debug__A__En__STARTING ROUND__40">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__endRound::Region1::Debug__A__En__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_KbCZAIEiEee4oNt2wclvpA" name="Debug__Path__startRound" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_KbGqcYEiEee4oNt2wclvpA" name="Debug__C__startRound">
            <connectionPoint xmi:id="_KbLi8IEiEee4oNt2wclvpA" name="en" kind="entryPoint"/>
            <connectionPoint xmi:id="_KbSQoIEiEee4oNt2wclvpA" name="ex" kind="exitPoint"/>
            <region xmi:id="_KbGqcoEiEee4oNt2wclvpA" name="Region1">
              <transition xmi:id="_KcB3gIEiEee4oNt2wclvpA" name="Debug__init__trans__startRound" source="_KbLi8IEiEee4oNt2wclvpA" target="_Kb-0MIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KdCkIIEiEee4oNt2wclvpA" name="Debug__init__trans__startRound__68">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),(char *)&quot;&quot;,this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__init__trans__startRound&quot;,(char *)&quot;en&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;null&quot;,(char *)&quot;null&quot;);
</body>
                </effect>
              </transition>
              <transition xmi:id="_KcB3gYEiEee4oNt2wclvpA" name="Debug__Ex__STARTING ROUND" source="_Kb-0MIEiEee4oNt2wclvpA" target="_Kb-0MoEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KdFncIEiEee4oNt2wclvpA" name="Debug__Ex__STARTING ROUND__70">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KcB3goEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KcB3g4EiEee4oNt2wclvpA" name="Debug__AC__startRound" source="_Kb-0MoEiEee4oNt2wclvpA" target="_Kb_bQIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KcCekIEiEee4oNt2wclvpA" visibility="public" isReentrant="true">
                  <name xsi:nil="true"/>
                  <language>C++</language>
                  <body>log.show(&quot;starting round %d.\n&quot;, this->round);&#xD;
startPort.start().send();
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__AC__startRound&quot;,(char *)&quot;Debug__B__Ac__startRound&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KcB3hIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KcCekYEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR END OF ROUND" source="_Kb_bQIEiEee4oNt2wclvpA" target="_KcBQcIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KdIDsIEiEee4oNt2wclvpA" name="Debug__En__WAITING FOR END OF ROUND__73">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;Debug__A__Ac__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KcCekoEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <transition xmi:id="_KcCek4EiEee4oNt2wclvpA" name="Debug__end__trans__startRound" source="_KcBQcIEiEee4oNt2wclvpA" target="_KbSQoIEiEee4oNt2wclvpA">
                <effect xmi:type="uml:OpaqueBehavior" xmi:id="_KdKf8IEiEee4oNt2wclvpA" name="Debug__end__trans__startRound__75">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::TRANISTION,debugEvents::TRANISTIONEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__end__trans__startRound&quot;,(char *)&quot;Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;ex&quot;,msg->signal.getSrcPort()->containerClass->name,msg->signal.getSrcPort()->getName());
</body>
                </effect>
                <trigger xmi:id="_KcCelIEiEee4oNt2wclvpA" name="Debug__Exec" port="_KTyhgIEiEee4oNt2wclvpA">
                  <event xmi:type="uml:CallEvent" href="../CommGateWay/model.uml#_B2LakK1AEea2s6SIdFjObg"/>
                </trigger>
              </transition>
              <subvertex xmi:type="uml:State" xmi:id="_Kb-0MIEiEee4oNt2wclvpA" name="Debug__B__Ex__STARTING ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kb-0MYEiEee4oNt2wclvpA" name="Debug__B__Ex__STARTING ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KcGwAYEiEee4oNt2wclvpA" name="Debug__B__Ex__STARTING ROUND__63">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ex__STARTING ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kb-0MoEiEee4oNt2wclvpA" name="Debug__B__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kb-0M4EiEee4oNt2wclvpA" name="Debug__B__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;STARTING ROUND&quot;,&quot;&quot;,&quot;&quot;,2,StateExitBreakPoint,1) or Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KcOEwYEiEee4oNt2wclvpA" name="Debug__B__Ac__startRound__64">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__B__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_Kb_bQIEiEee4oNt2wclvpA" name="Debug__A__Ac__startRound">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_Kb_bQYEiEee4oNt2wclvpA" name="Debug__A__Ac__startRound">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;startRound&quot;,&quot;&quot;,&quot;&quot;,3,TransitionEffectBreakPoint,1) or Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,0))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_Kct0AIEiEee4oNt2wclvpA" name="Debug__A__Ac__startRound__65">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__Ac__startRound&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
              <subvertex xmi:type="uml:State" xmi:id="_KcBQcIEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR END OF ROUND">
                <entry xmi:type="uml:OpaqueBehavior" xmi:id="_KcBQcYEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR END OF ROUND">
                  <language>C++</language>
                  <body>if (not(Debug__SRO.checkDebug(&quot;WAITING FOR END OF ROUND&quot;,&quot;&quot;,&quot;&quot;,4,StateEntryBreakPoint,1))){
extComm.selfExec().send();}

Debug__sendEvent(debugEvents::STATE,debugEvents::STATEENTRYEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </entry>
                <exit xmi:type="uml:OpaqueBehavior" xmi:id="_KcvpMIEiEee4oNt2wclvpA" name="Debug__A__En__WAITING FOR END OF ROUND__66">
                  <language>C++</language>
                  <body>
Debug__sendEvent(debugEvents::STATE,debugEvents::STATEEXITEND,this->getName(),this->getIndex(),msg->getSignalName(),this->getTypeName(),(char *)&quot;PingPong::Referee::RefereeStateMachine::Region::Debug__C__startRound::Region1::Debug__A__En__WAITING FOR END OF ROUND&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;,(char *)&quot;&quot;);
</body>
                </exit>
              </subvertex>
            </region>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_KdOKUIEiEee4oNt2wclvpA" name="Debug__InitState"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KTx6cYEiEee4oNt2wclvpA" name="Debug__recallAllMsg" specification="_KTx6cIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>endPort.recallAll();
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KUJt4YEiEee4oNt2wclvpA" name="Debug__variablesViewMethod" specification="_KUJt4IEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempS=&quot;&quot;;
tempS.append(&quot;round,&quot;);
tempS.append(&quot;Integer,&quot;);
if(round!=0){
    char tempR[10];
    sprintf(tempR,&quot;%d&quot;,round);
    tempS.append(tempR);
    tempS.append(&quot;\n&quot;);
}else {
    tempS.append(&quot;0&quot;);
    tempS.append(&quot;\n&quot;);
};
if (Debug__variablesData==NULL)
    Debug__variablesData=(char *)malloc(strlen(tempS.c_str())+1);
else if (strlen(Debug__variablesData)&lt;strlen(tempS.c_str()))
    Debug__variablesData=(char *) realloc(Debug__variablesData,strlen(tempS.c_str())+1);
strcpy(Debug__variablesData,tempS.c_str());
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KUN_UIEiEee4oNt2wclvpA" name="Debug__variablesChange" specification="_KUMxMIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>std::string tempVarName=&quot;&quot;;
tempVarName.append(varName);
if (&quot;round&quot;==tempVarName){
    round=atoi(varValue);
    return true;
}else 
    return false;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_KWTqAIEiEee4oNt2wclvpA" name="Debug__sendEvent" specification="_KU8YEIEiEee4oNt2wclvpA">
        <language>C++</language>
        <body>this->Debug__variablesView();
this->Debug__event.clearEventPayload();
this->Debug__event.generateEventID();
this->Debug__event.setCpuTik();
this->Debug__event.setTimePointToNow();
this->Debug__event.setEventSourceKind(eventSourceKind);
this->Debug__event.setEventType(eventType);
this->Debug__event.setCapsuleName(capsuleName);
this->Debug__event.setCapsuleInstance(instanceName);
this->Debug__event.setCapsuleIndex(capsuleIndex);
this->Debug__event.setSourceName(sourceName);
this->Debug__event.setVariableData(this->Debug__variablesData);
this->Debug__event.setPayloadField(&quot;Status&quot;,this->Debug__SRO.getStatusStr());
if (eventSourceKind==debugEvents::TRANISTION){
this->Debug__event.setPayloadField(&quot;Source&quot;,reserve1);
this->Debug__event.setPayloadField(&quot;Target&quot;,reserve2);
this->Debug__event.setPayloadField(&quot;Signal&quot;,signalName);
this->Debug__event.setPayloadField(&quot;SenderCapsule&quot;,reserve3);
this->Debug__event.setPayloadField(&quot;Port&quot;,reserve4);
}
std::string tempS=this->Debug__event.serialize();
char eventStr[tempS.length()+1];
strcpy(eventStr,tempS.c_str());
extComm.event(eventStr).send();
</body>
      </ownedBehavior>
      <ownedOperation xmi:id="_KTx6cIEiEee4oNt2wclvpA" name="Debug__recallAllMsg" visibility="private" method="_KTx6cYEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KUJt4IEiEee4oNt2wclvpA" name="Debug__variablesView" visibility="private" method="_KUJt4YEiEee4oNt2wclvpA"/>
      <ownedOperation xmi:id="_KUMxMIEiEee4oNt2wclvpA" name="Debug__variablesChange" visibility="private" method="_KUN_UIEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KUMxMYEiEee4oNt2wclvpA" name="methodReturn" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KUNYQIEiEee4oNt2wclvpA" name="varName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KUNYQYEiEee4oNt2wclvpA" name="varValue">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:id="_KU8YEIEiEee4oNt2wclvpA" name="Debug__sendEvent" visibility="private" method="_KWTqAIEiEee4oNt2wclvpA">
        <ownedParameter xmi:id="_KU8_IIEiEee4oNt2wclvpA" name="eventSourceKind">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KVKagIEiEee4oNt2wclvpA" name="eventType">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KVYc8IEiEee4oNt2wclvpA" name="instanceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KVnGcIEiEee4oNt2wclvpA" name="capsuleIndex">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KVnGcYEiEee4oNt2wclvpA" name="signalName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KVxegIEiEee4oNt2wclvpA" name="capsuleName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KV8doIEiEee4oNt2wclvpA" name="sourceName">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KV9EsIEiEee4oNt2wclvpA" name="reserve1">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KV9rwIEiEee4oNt2wclvpA" name="reserve2">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KV9rwYEiEee4oNt2wclvpA" name="reserve3">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:id="_KWJR8IEiEee4oNt2wclvpA" name="reserve4">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_dgvdoH34Eee8vPff7YDTwQ" name="StartProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_dglsoH34Eee8vPff7YDTwQ" name="StartProtocol">
        <interfaceRealization xmi:id="_dhENwH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dg8R8H34Eee8vPff7YDTwQ" contract="_dg8R8H34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_dhZk8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ" contract="_dhSQMH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dg8R8H34Eee8vPff7YDTwQ" name="StartProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhH4IH34Eee8vPff7YDTwQ" name="StartProtocol~">
        <ownedOperation xmi:id="_FavRgH35Eee8vPff7YDTwQ" name="start"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhPz8H34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhH4IH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_dhRpIH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_dhSQMH34Eee8vPff7YDTwQ" name="StartProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_dhbaIH34Eee8vPff7YDTwQ" client="_dglsoH34Eee8vPff7YDTwQ" supplier="_dhSQMH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_FbDakH35Eee8vPff7YDTwQ" operation="_FavRgH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_wEMKsH34Eee8vPff7YDTwQ" name="endProtocol">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_wEGEEH34Eee8vPff7YDTwQ" name="endProtocol">
        <interfaceRealization xmi:id="_wEZmEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wES4YH34Eee8vPff7YDTwQ" contract="_wES4YH34Eee8vPff7YDTwQ"/>
        <interfaceRealization xmi:id="_wEr58H34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ" contract="_wElMQH34Eee8vPff7YDTwQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wES4YH34Eee8vPff7YDTwQ" name="endProtocol"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wEbbQH34Eee8vPff7YDTwQ" name="endProtocol~">
        <ownedOperation xmi:id="_IsjnkH35Eee8vPff7YDTwQ" name="end"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEjXEH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wEbbQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_wEklMH34Eee8vPff7YDTwQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_wElMQH34Eee8vPff7YDTwQ" name="endProtocolIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_wEtvIH34Eee8vPff7YDTwQ" client="_wEGEEH34Eee8vPff7YDTwQ" supplier="_wElMQH34Eee8vPff7YDTwQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_IsvNwH35Eee8vPff7YDTwQ" operation="_IsjnkH35Eee8vPff7YDTwQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_KIkI8IEiEee4oNt2wclvpA" name="Debug__Top">
      <ownedAttribute xmi:id="_KMiqAIEiEee4oNt2wclvpA" name="Debug__Gateway">
        <type xmi:type="uml:Class" href="../CommGateWay/model.uml#_XIyCcAdxEeadtKuU2t6fMg"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KMsbAYEiEee4oNt2wclvpA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_KMtCEIEiEee4oNt2wclvpA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_KM2MAIEiEee4oNt2wclvpA" name="Debug__Top" type="_oVoIcDKJEeeIZIaasUdwVA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_KNDAUYEiEee4oNt2wclvpA" value="1"/>
        <upperValue xmi:type="uml:LiteralInteger" xmi:id="_KNDAUoEiEee4oNt2wclvpA" value="1"/>
      </ownedAttribute>
    </packagedElement>
    <profileApplication xmi:id="_cJ2kYzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZTJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kZjJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:id="_cJ2kZzJjEeeIZIaasUdwVA">
      <eAnnotations xmi:id="_cJ2kaDJjEeeIZIaasUdwVA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:ProtocolContainer xmi:id="_-IyvETJjEeeIZIaasUdwVA" base_Package="_-IyvEDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-J_o8DJjEeeIZIaasUdwVA" base_Interface="_-J138DJjEeeIZIaasUdwVA"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KIy4TJjEeeIZIaasUdwVA" base_Interface="_-KIy4DJjEeeIZIaasUdwVA" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_-KSj4jJjEeeIZIaasUdwVA" base_Interface="_-KSj4TJjEeeIZIaasUdwVA" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_-Kbt0TJjEeeIZIaasUdwVA" base_Collaboration="_-CQpQDJjEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_JMUgYDKEEeeIZIaasUdwVA" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_uG1EUDKEEeeIZIaasUdwVA" base_Port="_uF7scDKEEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_BGPUoDKFEeeIZIaasUdwVA" isWired="false" base_Port="_BGFjoDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_LWwiMDKFEeeIZIaasUdwVA" base_Pseudostate="_LWmxMDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_LXWYETKFEeeIZIaasUdwVA" base_State="_LXWYEDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_LXzEADKFEeeIZIaasUdwVA" base_Region="_LWT2QDKFEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_LZu9wDKFEeeIZIaasUdwVA" base_StateMachine="_LUEakDKFEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_UUaHzDKHEeeIZIaasUdwVA" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_bdGowDKHEeeIZIaasUdwVA" base_Port="_bc83wDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:RTPort xmi:id="_gaTikTKHEeeIZIaasUdwVA" isWired="false" base_Port="_gaTikDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pViYMjKHEeeIZIaasUdwVA" base_Pseudostate="_pViYMTKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTState xmi:id="_pVsJMTKHEeeIZIaasUdwVA" base_State="_pVsJMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_pVsJMzKHEeeIZIaasUdwVA" base_Region="_pViYMDKHEeeIZIaasUdwVA"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_pW4cEDKHEeeIZIaasUdwVA" base_StateMachine="_pVZOQDKHEeeIZIaasUdwVA"/>
  <UMLRealTime:Capsule xmi:id="_oW0bTDKJEeeIZIaasUdwVA" base_Class="_oVoIcDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_sKwm8DKJEeeIZIaasUdwVA" base_Property="_sKndADKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_x3ijkDKJEeeIZIaasUdwVA" base_Property="_x3YykDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:RTConnector xmi:id="_62BhgjKJEeeIZIaasUdwVA" base_Connector="_61R6oDKJEeeIZIaasUdwVA"/>
  <UMLRealTime:CapsulePart xmi:id="_U5_qQH34Eee8vPff7YDTwQ" base_Property="_Uy91MH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_VSOkEH34Eee8vPff7YDTwQ" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_coMsEH34Eee8vPff7YDTwQ" base_Port="_coBs8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_dg2LUH34Eee8vPff7YDTwQ" base_Package="_dgvdoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhBKcH34Eee8vPff7YDTwQ" base_Interface="_dg8R8H34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhNXsH34Eee8vPff7YDTwQ" base_Interface="_dhH4IH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_dhXIsH34Eee8vPff7YDTwQ" base_Interface="_dhSQMH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_dhdPUH34Eee8vPff7YDTwQ" base_Collaboration="_dglsoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_ipb1wH34Eee8vPff7YDTwQ" base_Port="_ipVIEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_olKNUH34Eee8vPff7YDTwQ" base_Connector="_olDfoH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_uEhZAH34Eee8vPff7YDTwQ" base_Port="_uEbSYH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_wEQcIH34Eee8vPff7YDTwQ" base_Package="_wEMKsH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEWiwH34Eee8vPff7YDTwQ" base_Interface="_wES4YH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEhh4H34Eee8vPff7YDTwQ" base_Interface="_wEbbQH34Eee8vPff7YDTwQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_wEpdsH34Eee8vPff7YDTwQ" base_Interface="_wElMQH34Eee8vPff7YDTwQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_wEvkUH34Eee8vPff7YDTwQ" base_Collaboration="_wEGEEH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_xzpWIH34Eee8vPff7YDTwQ" base_Port="_xzj2kH34Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTConnector xmi:id="_8-rrMX34Eee8vPff7YDTwQ" base_Connector="_8-nZwH34Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_b38B4H36Eee8vPff7YDTwQ" base_Pseudostate="_b317QH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_b4D9sH36Eee8vPff7YDTwQ" base_State="_b4A6YH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_b4IPIH36Eee8vPff7YDTwQ" base_Region="_b3xCwH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_b58NAH36Eee8vPff7YDTwQ" base_StateMachine="_b26uMH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_gTkfsH36Eee8vPff7YDTwQ" isWired="false" base_Port="_gTLeIH36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_hFBx0H36Eee8vPff7YDTwQ" isWired="false" base_Port="_hE7rMH36Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_63rQgH36Eee8vPff7YDTwQ" base_State="_63lJ4H36Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_F8Qi0H38Eee8vPff7YDTwQ" isWired="false" base_Port="_F7fGwH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_n2CgsH38Eee8vPff7YDTwQ" base_State="_n1-PQH38Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_mQPyIH39Eee8vPff7YDTwQ" base_Pseudostate="_mQKSkH39Eee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_66KKgH3_Eee8vPff7YDTwQ" base_State="_66GgIH3_Eee8vPff7YDTwQ"/>
  <UMLRealTime:RTPort xmi:id="_mpzaQH4AEee8vPff7YDTwQ" isWired="false" base_Port="_mo-64H4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTState xmi:id="_wOI3QH4AEee8vPff7YDTwQ" base_State="_wOD-wH4AEee8vPff7YDTwQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_EMomAH4BEee8vPff7YDTwQ" base_Pseudostate="_EMjGcH4BEee8vPff7YDTwQ"/>
  <UMLRealTime:Capsule xmi:id="_KMPIAIEiEee4oNt2wclvpA" base_Class="_KIkI8IEiEee4oNt2wclvpA"/>
  <UMLRealTime:CapsulePart xmi:id="_KMsbAIEiEee4oNt2wclvpA" base_Property="_KMiqAIEiEee4oNt2wclvpA"/>
  <UMLRealTime:CapsulePart xmi:id="_KNDAUIEiEee4oNt2wclvpA" base_Property="_KM2MAIEiEee4oNt2wclvpA"/>
  <UMLRealTime:RTPort xmi:id="_KN1qgIEiEee4oNt2wclvpA" isNotification="true" isWired="false" base_Port="_KNlL0IEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KO-S8IEiEee4oNt2wclvpA" type="debugEvents::Event" base_Property="_KOwQgoEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KPURMIEiEee4oNt2wclvpA" type="SROManager" base_Property="_KPLuUIEiEee4oNt2wclvpA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_KPhskIEiEee4oNt2wclvpA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_UTN08DKHEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KP-YgIEiEee4oNt2wclvpA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_KP3q0IEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KQJXoIEiEee4oNt2wclvpA" type="debugEvents::EVENTTYPE" base_Parameter="_KQD4EIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KQYoMIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KQO3MIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KQkOYIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KQeHwYEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KQwboIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KQpG4IEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KQ-eEIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KQ4-gIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KRJdMIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KRD9oIEiEee4oNt2wclvpA"/>
  <UMLRealTime:RTPort xmi:id="_KRbKAIEiEee4oNt2wclvpA" isNotification="true" isWired="false" base_Port="_KRVqcIEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KR0LkIEiEee4oNt2wclvpA" type="debugEvents::Event" base_Property="_KRuE8IEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KR-joIEiEee4oNt2wclvpA" type="SROManager" base_Property="_KR5EEIEiEee4oNt2wclvpA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_KSKJ0IEiEee4oNt2wclvpA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_IYQmMDKEEeeIZIaasUdwVA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KSlnoIEiEee4oNt2wclvpA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_KSgvIIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KSxN0IEiEee4oNt2wclvpA" type="debugEvents::EVENTTYPE" base_Parameter="_KSruQIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KS7l4IEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KS2GUIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KTGlAIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KTBsgIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KTRkIIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KTMEkIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KTcjQIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KTXDsYEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KTowgIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KThbwIEiEee4oNt2wclvpA"/>
  <UMLRealTime:RTPort xmi:id="_KT4BEIEiEee4oNt2wclvpA" isNotification="true" isWired="false" base_Port="_KTyhgIEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KUUtAIEiEee4oNt2wclvpA" type="debugEvents::Event" base_Property="_KUPNcIEiEee4oNt2wclvpA"/>
  <RTCppProperties:AttributeProperties xmi:id="_KUeeAIEiEee4oNt2wclvpA" type="SROManager" base_Property="_KUY-cIEiEee4oNt2wclvpA"/>
  <RTCppProperties:CapsuleProperties xmi:id="_KUqEMIEiEee4oNt2wclvpA" headerPreface="#include &quot;Event.h&quot;&#xA;&#xA;#include &quot;SROManager.h&quot;&#xA;" base_Class="_VPgAMH34Eee8vPff7YDTwQ"/>
  <RTCppProperties:ParameterProperties xmi:id="_KVCesIEiEee4oNt2wclvpA" type="debugEvents::EVENTSOURCEKIND" base_Parameter="_KU8_IIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KVRvQIEiEee4oNt2wclvpA" type="debugEvents::EVENTTYPE" base_Parameter="_KVKagIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KVfxsIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KVYc8IEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KVr-8IEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KVnGcYEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KV3lIIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KVxegIEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KWEZcIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KV9rwYEiEee4oNt2wclvpA"/>
  <RTCppProperties:ParameterProperties xmi:id="_KWOxgIEiEee4oNt2wclvpA" type="const char *" base_Parameter="_KWJR8IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KWfQMIEiEee4oNt2wclvpA" base_Pseudostate="_KWaXsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KWkvwIEiEee4oNt2wclvpA" base_State="_KWf3QIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KWqPUIEiEee4oNt2wclvpA" base_Pseudostate="_KWkvwYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KWvu4IEiEee4oNt2wclvpA" base_Pseudostate="_KWqPUYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KXPeIIEiEee4oNt2wclvpA" base_Region="_KWf3QYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KXgj4IEiEee4oNt2wclvpA" base_State="_KXQFMIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KXpt0IEiEee4oNt2wclvpA" base_State="_KXQsQIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KX0F4IEiEee4oNt2wclvpA" base_State="_KXRTUIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KYtdwIEiEee4oNt2wclvpA" base_Pseudostate="_KYolQIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KY0LcIEiEee4oNt2wclvpA" base_State="_KYuE0IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KY8uUIEiEee4oNt2wclvpA" base_Pseudostate="_KY0ygIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KZGfUIEiEee4oNt2wclvpA" base_Pseudostate="_KY9VYIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KZzp8IEiEee4oNt2wclvpA" base_Region="_KYuE0YEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KaJBIIEiEee4oNt2wclvpA" base_State="_KZ0RAIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KafmcIEiEee4oNt2wclvpA" base_State="_KZ4icIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KaoJUIEiEee4oNt2wclvpA" base_State="_KZ8z4IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KaxTQIEiEee4oNt2wclvpA" base_State="_KZ_QIIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KbGqcIEiEee4oNt2wclvpA" base_Pseudostate="_KbCZAIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KbK74IEiEee4oNt2wclvpA" base_State="_KbGqcYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KbRpkIEiEee4oNt2wclvpA" base_Pseudostate="_KbLi8IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KbfsAIEiEee4oNt2wclvpA" base_Pseudostate="_KbSQoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Kb-NIIEiEee4oNt2wclvpA" base_Region="_KbGqcoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KcGwAIEiEee4oNt2wclvpA" base_State="_Kb-0MIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KcOEwIEiEee4oNt2wclvpA" base_State="_Kb-0MoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KctM8IEiEee4oNt2wclvpA" base_State="_Kb_bQIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KdAu8IEiEee4oNt2wclvpA" base_State="_KcBQcIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KdVfEIEiEee4oNt2wclvpA" base_State="_KdOKUIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KdkIkIEiEee4oNt2wclvpA" base_Pseudostate="_Kdf3IIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KdqPMIEiEee4oNt2wclvpA" base_State="_KdkIkYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KdvuwIEiEee4oNt2wclvpA" base_Pseudostate="_KdqPMYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kd0nQIEiEee4oNt2wclvpA" base_Pseudostate="_KdwV0IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KeJXYIEiEee4oNt2wclvpA" base_Region="_KdkIkoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KeRTMIEiEee4oNt2wclvpA" base_State="_KeJ-cIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KeYn8IEiEee4oNt2wclvpA" base_State="_KeLMkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kef8sIEiEee4oNt2wclvpA" base_State="_KeLzoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Ke92wIEiEee4oNt2wclvpA" base_Pseudostate="_Ke3wIIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KfFLgIEiEee4oNt2wclvpA" base_State="_Ke92wYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KfNuYIEiEee4oNt2wclvpA" base_Pseudostate="_KfFLgYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KfTN8IEiEee4oNt2wclvpA" base_Pseudostate="_KfOVcIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KfhQYIEiEee4oNt2wclvpA" base_Region="_Ke92woEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KfrBYIEiEee4oNt2wclvpA" base_State="_Kfh3cIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kf3OoIEiEee4oNt2wclvpA" base_State="_KfjFkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kf98UIEiEee4oNt2wclvpA" base_State="_KfkTsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KgaoQIEiEee4oNt2wclvpA" base_Pseudostate="_KgLXsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KglnYIEiEee4oNt2wclvpA" base_State="_KgaoQYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kg1fAIEiEee4oNt2wclvpA" base_Pseudostate="_KglnYYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kg_3EIEiEee4oNt2wclvpA" base_Pseudostate="_Kg2GEIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KhxTIIEiEee4oNt2wclvpA" base_Region="_KgaoQoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kh4A0IEiEee4oNt2wclvpA" base_State="_KhxTIYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KiE1IIEiEee4oNt2wclvpA" base_State="_Khx6MIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KiTeoIEiEee4oNt2wclvpA" base_State="_KhzIUIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KituUIEiEee4oNt2wclvpA" base_Pseudostate="_KinAoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ki1qIIEiEee4oNt2wclvpA" base_State="_KiuVYIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Ki8-4IEiEee4oNt2wclvpA" base_Pseudostate="_Ki2RMIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KjEToIEiEee4oNt2wclvpA" base_Pseudostate="_Ki9l8IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KjRH8IEiEee4oNt2wclvpA" base_Region="_KiuVYYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KjiNsIEiEee4oNt2wclvpA" base_State="_KjRH8YEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KjntQIEiEee4oNt2wclvpA" base_State="_KjRvAIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KjvCAIEiEee4oNt2wclvpA" base_State="_KjSWEIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kj6BIIEiEee4oNt2wclvpA" base_State="_KjS9IIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KkU34IEiEee4oNt2wclvpA" base_Pseudostate="_KkOKMIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KkiTQIEiEee4oNt2wclvpA" base_State="_KkVe8IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kkt5cIEiEee4oNt2wclvpA" base_Pseudostate="_KkiTQYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kk2cUIEiEee4oNt2wclvpA" base_Pseudostate="_KkuggIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KldgUIEiEee4oNt2wclvpA" base_Region="_KkVe8YEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KlxCUIEiEee4oNt2wclvpA" base_State="_KleHYIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kl4-IIEiEee4oNt2wclvpA" base_State="_KleucYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kme0AIEiEee4oNt2wclvpA" base_State="_Klk1EIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Km8HAIEiEee4oNt2wclvpA" base_State="_Km3OgIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kn4iMIEiEee4oNt2wclvpA" base_Pseudostate="_KnzpsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KoEvcIEiEee4oNt2wclvpA" base_State="_Kn5JQIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KoJn8IEiEee4oNt2wclvpA" base_Pseudostate="_KoEvcYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KoPukIEiEee4oNt2wclvpA" base_Pseudostate="_KoKPAIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KooJEIEiEee4oNt2wclvpA" base_Region="_Kn5JQYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ko4AsIEiEee4oNt2wclvpA" base_State="_KooJEYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ko_8gIEiEee4oNt2wclvpA" base_State="_KoowIIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KpKUkIEiEee4oNt2wclvpA" base_State="_Kop-QIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KpnAgIEiEee4oNt2wclvpA" base_Pseudostate="_KpaMMIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kp3fMIEiEee4oNt2wclvpA" base_State="_KpnnkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KqCeUIEiEee4oNt2wclvpA" base_Pseudostate="_Kp3fMYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KqKaIIEiEee4oNt2wclvpA" base_Pseudostate="_KqCeUYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_Kqz6YIEiEee4oNt2wclvpA" base_Region="_KpnnkYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kq9EUIEiEee4oNt2wclvpA" base_State="_Kq0hcIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KrFnMIEiEee4oNt2wclvpA" base_State="_Kq1IgIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KrLGwIEiEee4oNt2wclvpA" base_State="_Kq1IgoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KrSbgIEiEee4oNt2wclvpA" base_State="_Kq2WoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Krl9gIEiEee4oNt2wclvpA" base_Pseudostate="_Krf24IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KrsEIIEiEee4oNt2wclvpA" base_State="_KrmkkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kr1OEIEiEee4oNt2wclvpA" base_Pseudostate="_KrtSQIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KsDQgIEiEee4oNt2wclvpA" base_Pseudostate="_Kr9w8IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KseuUIEiEee4oNt2wclvpA" base_Region="_KrmkkYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KsrioIEiEee4oNt2wclvpA" base_State="_Ksf8cIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KsxCMIEiEee4oNt2wclvpA" base_State="_KsgjgIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ks_rsIEiEee4oNt2wclvpA" base_State="_Ksi_wIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KtjsYIEiEee4oNt2wclvpA" base_Pseudostate="_KtaicIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KtpzAIEiEee4oNt2wclvpA" base_State="_KtjsYYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KturgIEiEee4oNt2wclvpA" base_Pseudostate="_KtpzAYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_Kt64wIEiEee4oNt2wclvpA" base_Pseudostate="_KtvSkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KugHkIEiEee4oNt2wclvpA" base_Region="_KtjsYoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KuybcIEiEee4oNt2wclvpA" base_State="_KuguoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ku5JIIEiEee4oNt2wclvpA" base_State="_KuhVsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ku_PwIEiEee4oNt2wclvpA" base_State="_Kuh8wIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KvatkIEiEee4oNt2wclvpA" base_Pseudostate="_KvPHYIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Kvg0MIEiEee4oNt2wclvpA" base_State="_KvbUoIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KvoI8IEiEee4oNt2wclvpA" base_Pseudostate="_Kvg0MYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KvtBcIEiEee4oNt2wclvpA" base_Pseudostate="_KvowAIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KwGDAIEiEee4oNt2wclvpA" base_Region="_Kvb7sIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KwRpMIEiEee4oNt2wclvpA" base_State="_KwGDAYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KwYW4IEiEee4oNt2wclvpA" base_State="_KwGqEIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KwkkIIEiEee4oNt2wclvpA" base_State="_KwHRIIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KxDsUIEiEee4oNt2wclvpA" base_Pseudostate="_KwymkIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KxMPMIEiEee4oNt2wclvpA" base_State="_KxDsUYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KxZqkIEiEee4oNt2wclvpA" base_Pseudostate="_KxMPMYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_KxqJQIEiEee4oNt2wclvpA" base_Pseudostate="_KxbfwIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTRegion xmi:id="_KyeooIEiEee4oNt2wclvpA" base_Region="_KxDsUoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KyzYwIEiEee4oNt2wclvpA" base_State="_KyfPsIEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_Ky_mAIEiEee4oNt2wclvpA" base_State="_KyfPsoEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KzJXAIEiEee4oNt2wclvpA" base_State="_Kyf2wYEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KzSg8IEiEee4oNt2wclvpA" base_State="_Kygd0IEiEee4oNt2wclvpA"/>
  <UMLRTStateMachines:RTState xmi:id="_KzhxgIEiEee4oNt2wclvpA" base_State="_Kzc5AIEiEee4oNt2wclvpA"/>
</xmi:XMI>
